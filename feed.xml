<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://markwoodhall.com' rel='self' type='application/rss+xml'/>
<title>
Mark Woodhall
</title>
<link>
http://markwoodhall.com
</link>
<description>
Just a software blog
</description>
<lastBuildDate>
Tue, 24 May 2016 20:25:23 +0100
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://markwoodhall.com/21-05-2016-my-clojure-workflow-and-setup/
</guid>
<link>
http://markwoodhall.com/21-05-2016-my-clojure-workflow-and-setup/
</link>
<title>
My Clojure Workflow and Setup.
</title>
<description>
&lt;p&gt;I've been using Clojure for at least a couple of years now, in that time I've jumped around various text editors. When I was first getting started I used &lt;a href='http://lighttable.com/'&gt;Light Table&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Light Table is the next generation code editor. Light Table Connects you to your creation with instant feedback and showing data values flow through your code. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Looking back I think that was probably a good decision as it was easy to get started with but still offered a very rich and interactive experience.&lt;/p&gt;&lt;p&gt;Given that I already had experience with vim it made sense to try that next and I found the experience to be good. I did always have the feeling like I was missing something though. Emacs!&lt;/p&gt;&lt;p&gt;I always felt inclined to move to Emacs because of its superior lisp support, not to mention its programmability using Elisp. In the end I did end up sticking with vim, I'd already got too much invested in using vim at this point and not just for Clojure, ultimately it was a habit I just couldn't break and as it turns out I've ended up very happy with the Clojure support.&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;vim&amp;#95;plugins&quot;&gt;&lt;/a&gt;vim plugins&lt;/h1&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://github.com/guns/vim-clojure-static'&gt;vim-clojure-static&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://github.com/guns/vim-clojure-static'&gt;vim-clojure-static&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Meikel Brandmeyer's excellent Clojure runtime files, extracted from the VimClojure project for use with alternate Clojure REPL plugins. &lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;These files ship with Vim versions 7.3.803 and later, and are periodically merged into the official Vim repository. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Even though this ships with newer versions of vim I prefer to pull in the plugin from GitHub and keep up with development. As an example, support was added for &lt;code&gt;&amp;#42;.cljc&lt;/code&gt; and &lt;code&gt;&amp;#42;cljx&lt;/code&gt; files not that long ago.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://github.com/kien/rainbow_parentheses.vim'&gt;rainbow_parentheses&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://github.com/kien/rainbow_parentheses.vim'&gt;rainbow_parentheses&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Rainbow colors for parentheses, based on rainbow_parenthsis.vim of which there are multiple versions by Martin Krischik, John Gilmore, Luc Hermitte, and Steve Losh. &lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;This version uses significantly less code than the older ones (~80% less) and has new options to make it easier to change the colors and the parentheses depth. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Rainbow parentheses isn't exactly a &lt;em&gt;must have&lt;/em&gt; plugin but I really like it, it helps identify start and end brackets using colour and has support for a number of bracket types. It looks cool too.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/IbSfb74.png&quot; alt=&quot;parentheses&quot; /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://github.com/tpope/vim-fireplace'&gt;vim-fireplace&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://github.com/tpope/vim-fireplace'&gt;vim-fireplace&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; Clojure REPL support &lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt; There's a REPL in fireplace, but you probably wouldn't have noticed if I hadn't told you. Such is the way with fireplace.vim. By the way, this plugin is for Clojure. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This is the main one for me really. Everything I do with Clojure in vim revolves around &lt;a href='https://github.com/tpope/vim-fireplace'&gt;vim-fireplace&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;[vim-fireplace]() connects to a running nREPL server automagically using the .nrepl-port file generated by leiningen. You can tell it to connect manually using the &lt;code&gt;:Connect&lt;/code&gt; command, in all honesty I've used this sparingly.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;hot&amp;#95;reloading&quot;&gt;&lt;/a&gt;Hot reloading&lt;/h3&gt;&lt;p&gt;I find myself running the &lt;code&gt;:Require&lt;/code&gt; command all of the time. It's the equivalent of running &lt;code&gt;require&lt;/code&gt; at the REPL and specfying &lt;code&gt;:reload&lt;/code&gt;. &lt;code&gt;:Require!&lt;/code&gt; is much the same but specifies &lt;code&gt;:reload-all&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;documentation&quot;&gt;&lt;/a&gt;Documentation&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;:Doc&lt;/code&gt; command takes a symbol to look up documentation for. e.g &lt;code&gt;:Doc reduce&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/p9iDOKJ.gif&quot; alt=&quot;Doc&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;K&lt;/code&gt; is mapped to call &lt;code&gt;:Doc&lt;/code&gt; for the symbol under the cursor.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/nE8rqxs.gif&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;running&amp;#95;tests&quot;&gt;&lt;/a&gt;Running tests&lt;/h3&gt;&lt;p&gt;&lt;code&gt;:RunAllTests&lt;/code&gt; executes &lt;code&gt;&amp;#40;clojure.test/run-all-tests&amp;#41;&lt;/code&gt; and &lt;code&gt;:RunTests&lt;/code&gt; executes &lt;code&gt;&amp;#40;clojure.test/run-tests '$namespace&amp;#41;&lt;/code&gt;, where &lt;code&gt;$namespace&lt;/code&gt; is the namespace for the current file. &lt;code&gt;cpr&lt;/code&gt; is mapped to &lt;code&gt;:RunTests&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/70z8iVR.gif&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href='https://twitter.com/tpope'&gt;@tpope&lt;/a&gt;!&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://github.com/vim-scripts/paredit.vim'&gt;paraedit&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://github.com/vim-scripts/paredit.vim'&gt;paraedit&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; Paredit performs structured editing of Lisp S-expressions in Vim. Paredit.vim is similar to paredit.el for Emacs. Paredit Mode tries to maintain the balanced state of matched characters (parenthesis marks, square and curly braces, double quotes). &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;paraedit is an essential plugin for me. Even if it only balanced &quot;matched characters&quot; that would be enough but it also supports &quot;slurpage&quot; and &quot;barfage&quot; (moving an opening or closing bracket to include or exclude an element from a list).&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/f5ZkMNH.gif&quot; alt=&quot;Slurp&amp;Barf&quot; /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://github.com/tpope/vim-surround'&gt;vim-surround&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://github.com/tpope/vim-surround'&gt;vim-surround&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; Surround.vim is all about &quot;surroundings&quot;: parentheses, brackets, quotes, XML tags, and more. The plugin provides mappings to easily delete, change and add such surroundings in pairs. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;While I &lt;strong&gt;love&lt;/strong&gt; Paraedit I often find most pain when I want to remove brackets and it's balancing is preventing me from doing so. I use &lt;a href='https://github.com/tpope/vim-surround'&gt;vim-surround&lt;/a&gt; to help with this. In the example below I use &lt;code&gt;ds&amp;#40;&lt;/code&gt; to delete the surrounding bracket.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/khdGmh4.gif&quot; alt=&quot;delete surrounding&quot; /&gt;&lt;/p&gt;&lt;p&gt;I don't use &lt;a href='https://github.com/tpope/vim-surround'&gt;vim-surround&lt;/a&gt; just for this though, or just for Clojure, it's an awesome vim plugin in general. Check it out.&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href='https://twitter.com/tpope'&gt;@tpope&lt;/a&gt;!&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;lein&amp;#95;plugins&quot;&gt;&lt;/a&gt;lein plugins&lt;/h1&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://github.com/venantius/ultra/'&gt;ultra&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://github.com/venantius/ultra/'&gt;ultra&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; A Leiningen plugin for a superior development environment &lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;&lt;a name=&quot;colour&amp;#95;in&amp;#95;the&amp;#95;repl&quot;&gt;&lt;/a&gt;Colour in the REPL&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rQBfHmA.png&quot; alt=&quot;REPL Colour&quot; /&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;colour&amp;#95;on&amp;#95;source&quot;&gt;&lt;/a&gt;Colour on source&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/gspklgb.png&quot; alt=&quot;Imgur&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/venantius/ultra/'&gt;ultra&lt;/a&gt; is awesome. It makes working in the REPL a real pleasure. There isn't much I can say about it, the images above do the talking.&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href='https://twitter.com/venantius'&gt;@venantius&lt;/a&gt;!&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://github.com/jonase/eastwood'&gt;eastwood&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://github.com/jonase/eastwood'&gt;eastwood&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt; Eastwood is a Clojure lint tool that uses the tools.analyzer and tools.analyzer.jvm libraries to inspect namespaces and report possible problems. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I run &lt;code&gt;lein eastwood&lt;/code&gt; for Clojure linting. I've not yet tried the &lt;a href='https://github.com/venantius/vim-eastwood'&gt;vim-eastwood&lt;/a&gt; plugin but it's on my list of things to try.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 21 May 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/16-05-2016-unifying-validation-logic-across-the-client-and-server-using-clojure-and-clova/
</guid>
<link>
http://markwoodhall.com/16-05-2016-unifying-validation-logic-across-the-client-and-server-using-clojure-and-clova/
</link>
<title>
Unifying server and client validation using Clojure[Script] and Clova.
</title>
<description>
&lt;p&gt;&lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; supports both Clojure and ClojureScript, in this blog post we will create a simple &lt;a href='https://github.com/weavejester/compojure'&gt;Compojure&lt;/a&gt; server that validates a request and we will apply that same validation on the client side.&lt;/p&gt;&lt;p&gt;I'll be pushing all the code for this post to &lt;a href='https://github.com/markwoodhall/clova-blog-post'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;getting&amp;#95;started&quot;&gt;&lt;/a&gt;Getting started&lt;/h2&gt;&lt;p&gt;Let's start by creating a new project using &lt;code&gt;lein&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new compojure clova-blog-post
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once we've done that let's make sure it compiles...&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein compile :all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;.. and that the server starts up.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see a new window in your default browser open and load &lt;code&gt;http://localhost:3000&lt;/code&gt;, displaying &quot;Hello World&quot;.&lt;/p&gt;&lt;p&gt;The current state of the project should match &lt;a href='https://github.com/markwoodhall/clova-blog-post/tree/v0.0.1'&gt;the v0.0.1 tag&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now that's out of the way, let's pull in the &lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; dependency. Open &lt;code&gt;project.clj&lt;/code&gt; in your editor of choice (it's vim right?).&lt;/p&gt;&lt;p&gt;Once you've opened &lt;code&gt;project.clj&lt;/code&gt; add &lt;code&gt;&amp;#91;clova &amp;quot;0.26.0&amp;quot;&amp;#93;&lt;/code&gt; to &lt;code&gt;:dependencies&lt;/code&gt; and run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein compile :all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, open &lt;code&gt;src/clova&amp;#95;blog&amp;#95;post/handler.clj&lt;/code&gt; and &lt;code&gt;:require&lt;/code&gt; &lt;a href='http://markwoodhall.github.io/clova/clova.core.html'&gt;clova.core&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/001d6aaac3a0baa6b91326b0756a5dd8.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;our&amp;#95;first&amp;#95;validation&amp;#95;set&quot;&gt;&lt;/a&gt;Our first validation set&lt;/h2&gt;&lt;p&gt;For this blog post we will handle the &lt;code&gt;POST&lt;/code&gt; of a simple to-do list model, let's declare the validation set for it.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/e5055993d43aa785c7d4c7c44d0651d1.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Validation sets are just sequences of keys followed by the functions that validate the key. Where a function requires arguments, such as the length value passed to &lt;code&gt;shorter?&lt;/code&gt; it is wrapped in a sequence. Where map traversal needs to take place to get to the key to validate then we also wrap the key in a sequence, as in the &lt;code&gt;&amp;#91;:meta :category&amp;#93;&lt;/code&gt; example.&lt;/p&gt;&lt;p&gt;In this validation set we make use of &lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-required.3F'&gt;&lt;code&gt;required?&lt;/code&gt;&lt;/a&gt;, &lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-stringy.3F'&gt;&lt;code&gt;stringy?&lt;/code&gt;&lt;/a&gt;, &lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-shorter.3F'&gt;&lt;code&gt;shorter?&lt;/code&gt;&lt;/a&gt;, &lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-longer.3F'&gt;&lt;code&gt;longer?&lt;/code&gt;&lt;/a&gt; and &lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-date.3F'&gt;&lt;code&gt;date?&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;By default &lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; is somewhat relaxed about it's validation. Unless explicitly told by the use of &lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-required.3F'&gt;&lt;code&gt;required?&lt;/code&gt;&lt;/a&gt; all keys are considered to be optional.&lt;/p&gt;&lt;p&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-stringy.3F'&gt;&lt;code&gt;stringy?&lt;/code&gt;&lt;/a&gt; does what it says on the tin, checks for the presence of a string like value.&lt;/p&gt;&lt;p&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-shorter.3F'&gt;&lt;code&gt;shorter?&lt;/code&gt;&lt;/a&gt; works on strings and sequences and checks that a given value has a length shorter than X.&lt;/p&gt;&lt;p&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-longer.3F'&gt;&lt;code&gt;longer?&lt;/code&gt;&lt;/a&gt; works on strings and sequences and checks that a given value has a length longer than X.&lt;/p&gt;&lt;p&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-date.3F'&gt;&lt;code&gt;date?&lt;/code&gt;&lt;/a&gt; checks an input value to see if it is a date.&lt;/p&gt;&lt;p&gt;Now, let's compile again.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein compile :all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point you will probably get an exception.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.RuntimeException: No such var: c/equal?, compiling:&amp;#40;clova/core.cljc:267:7&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is because &lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; makes use of &lt;a href='https://github.com/clj-time/clj-time'&gt;clj-time&lt;/a&gt;, as does &lt;a href='https://github.com/weavejester/compojure'&gt;Compojure&lt;/a&gt;. Unfortunately &lt;a href='https://github.com/weavejester/compojure'&gt;Compojure&lt;/a&gt; pulls in an old version without the &lt;code&gt;equal?&lt;/code&gt; function. We can fix this by excluding &lt;a href='https://github.com/clj-time/clj-time'&gt;clj-time&lt;/a&gt; when we reference &lt;a href='https://github.com/weavejester/compojure'&gt;Compojure&lt;/a&gt;, like so:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/f5dc3542781e4f07a01d228273789c7a.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Notice the &lt;code&gt;:exclusions&lt;/code&gt; key for &lt;a href='https://github.com/weavejester/compojure'&gt;Compojure&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;After this run:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein clean
lein compile :all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Everything should be good again now. The current state of the project should match &lt;a href='https://github.com/markwoodhall/clova-blog-post/tree/v0.0.2'&gt;the v0.0.2 tag&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now, let's setup &lt;code&gt;handler.clj&lt;/code&gt; for JSON requests/responses and enable &lt;a href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS'&gt;CORS&lt;/a&gt;. To start with we need to add   &lt;code&gt;&amp;#91;ring/ring-json &amp;quot;0.4.0&amp;quot;&amp;#93;&lt;/code&gt; to our &lt;code&gt;:dependencies&lt;/code&gt; in &lt;code&gt;project.clj&lt;/code&gt;, then we update our &lt;code&gt;ns&lt;/code&gt; declaration in &lt;code&gt;handler.clj&lt;/code&gt; to refer to &lt;code&gt;handler&lt;/code&gt;, &lt;code&gt;response&lt;/code&gt;, &lt;code&gt;wrap-json-response&lt;/code&gt; and &lt;code&gt;wrap-json-params&lt;/code&gt;, like so:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/175cc91863a1869c7fd2c84d5fc6c4fd.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Still editing &lt;code&gt;handler.clj&lt;/code&gt; we create a couple of middleware functions to support &lt;a href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS'&gt;CORS&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/cb41a8998d74568310fefb5545cbad6d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Then we define our &lt;code&gt;app&lt;/code&gt; to make use of both the middleware functions and our imported JSON functions.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/90accbcd6e3549b8bb62194d645bd6a5.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We can now remove the default GET route:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/2db4ef99f60f988dac995116b151f7d3.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Replacing it with a POST route for our to-do item.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/414745ab7bb9f7301792801fd096cc58.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here, we validate the payload using the &lt;code&gt;to-do-validation&lt;/code&gt; set we created earlier. If it is &lt;code&gt;valid?&lt;/code&gt; we return the payload and a 200 status code, if it is not &lt;code&gt;valid?&lt;/code&gt; we return the &lt;code&gt;:results&lt;/code&gt; of the validation and a 400 status code.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;testing&amp;#95;the&amp;#95;server&quot;&gt;&lt;/a&gt;Testing the server&lt;/h2&gt;&lt;p&gt;If we make a valid request to our handler, like so:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/339b4e05733a7bccb39b8e41b286d060.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We should see the payload in the response:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/1e87bc28fa15d3c8e7342e3174ab9abc.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;If we make an invalid request to our handler by passing an invalid date value, like so:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/ccd2989426f604c478c203d89fae43e4.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We should see the validation results in the response:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/c46335654bd76514fd6573a11411243d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;With our server side validation working we can now move onto the client side. The state of the project currently should match &lt;a href='https://github.com/markwoodhall/clova-blog-post/tree/v0.0.3'&gt;the v0.0.3 tag&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;client&amp;#95;side&quot;&gt;&lt;/a&gt;Client side&lt;/h2&gt;&lt;p&gt;Clojure 1.7 introduced &lt;a href='http://dev.clojure.org/display/design/Reader+Conditionals'&gt;reader conditionals&lt;/a&gt;, these allow us to reuse as much code as possible across the various Clojure platforms.&lt;/p&gt;&lt;p&gt;In order to make our validation logic useable on the Clojure and ClojureScript platform we need to move it to a &lt;code&gt;&amp;#42;.cljc&lt;/code&gt; file, which is loadable by both Clojure and ClojureScript, let's do it.&lt;/p&gt;&lt;p&gt;First we need to create &lt;code&gt;validation.cljc&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim src/clova&amp;#95;blog&amp;#95;post/validation.cljc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, let's move our &lt;code&gt;to-do-validation&lt;/code&gt; definition to that file. It should look like this:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/b5fcc2b64dbf326001a508b880833cd9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We need to update &lt;code&gt;handler.clj&lt;/code&gt; to refer to &lt;code&gt;to-do-validation&lt;/code&gt;, we can add the following to&lt;code&gt;:require&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;clova-blog-post.validation :refer &amp;#91;to-do-validation&amp;#93;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just to verify our changes we can restart the server and run our &lt;code&gt;curl&lt;/code&gt; tests again.&lt;/p&gt;&lt;p&gt;With that out of the way we can open &lt;code&gt;project.clj&lt;/code&gt; and add the ClojureScript dependency by adding &lt;code&gt;&amp;#91;org.clojure/clojurescript &amp;quot;1.8.51&amp;quot;&amp;#93;&lt;/code&gt; to &lt;code&gt;:dependencies&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;If you are new to ClojureScript it is worth checking out the &lt;a href='https://github.com/clojure/clojurescript/wiki/Quick-Start'&gt;Quick Start wiki article&lt;/a&gt;. We will start by getting a generic &quot;Hello world&quot; to print to the browser console.&lt;/p&gt;&lt;p&gt;First, let's bootstrap the ClojureScript build.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim src/clova&amp;#95;blog&amp;#95;post/build.clj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/9af2a022714a75d2bd20b15bdf817b3b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;This is pretty self explanatory, we give it the path the build, the output path and specify a main entry point &lt;code&gt;clova-blog-post.client&lt;/code&gt; (which we will define later).&lt;/p&gt;&lt;p&gt;I usually wrap this with a shell script.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/3ee6fb9a1b91a169b3760454a7458871.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now we can create the &lt;code&gt;clova-blog-post.client&lt;/code&gt; entry point:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim src/clova&amp;#95;blog&amp;#95;post/client.cljs
&lt;/code&gt;&lt;/pre&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/e0fb9c1b50617fad9db48d5f619c8c0b.js&quot;&gt;&lt;/script&gt;&lt;p&gt;All we do here is enable console printing and write &quot;Hello world&quot;, with that done we can create &lt;code&gt;index.html&lt;/code&gt; and reference our compiled JavaScript.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim index.html
&lt;/code&gt;&lt;/pre&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/1dce13aeb5942e1528e4a0936903df82.js&quot;&gt;&lt;/script&gt;&lt;p&gt;If you open &lt;code&gt;index.html&lt;/code&gt; in your browser of choice you should see &quot;Hello world&quot; output to the developer console. (party)&lt;/p&gt;&lt;p&gt;Finally, let's hook up our validation.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/f3f9ecb498626016bf8e8fb0dd7e1d6e.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here we add a few text fields to build our to-do and then a text area to dump our validation results to.&lt;/p&gt;&lt;p&gt;Now let's validate those text fields.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim src/clova&amp;#95;blog&amp;#95;post/client.cljs
&lt;/code&gt;&lt;/pre&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/0b493c8721f626b5fa2c330c8b834c54.js&quot;&gt;&lt;/script&gt;&lt;p&gt;Here we pull out the values from our text boxes and build up our to-do map. Then we use exactly the same validation as we did on the server side (&lt;code&gt;to-do-validation&lt;/code&gt;) and dump the results to our text area.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;rounding&amp;#95;up&quot;&gt;&lt;/a&gt;Rounding up&lt;/h2&gt;I'm going to cut this short as it's already gone on way too long and we have worked through a simple example of using the same validation logic on the client and the server, even if we've not implemented any interaction between them, the principal remains the same.&lt;p&gt;Obviously this is a very simple example, we can handle much more complex validation and give a rich experience on the client side while still keeping the integrity of our data using server side validation. All this with as much re-use as possible for our core validation logic.&lt;/p&gt;&lt;p&gt;The state of the project currently should match &lt;a href='https://github.com/markwoodhall/clova-blog-post/tree/v0.0.4'&gt;the v0.0.4 tag&lt;/a&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 16 May 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/12-05-2016-building-a-distributed-in-memory-key-value-store-in-clojure/
</guid>
<link>
http://markwoodhall.com/12-05-2016-building-a-distributed-in-memory-key-value-store-in-clojure/
</link>
<title>
Building a distributed in-memory key value store in Clojure.
</title>
<description>
&lt;p&gt;In this series we are going to build a distributed in-memory key value store, from scratch, using Clojure. Why? For learning and fun!&lt;/p&gt;&lt;p&gt;The distributed in-memory store will be called &lt;a href='https://github.com/markwoodhall/memdi'&gt;&lt;code&gt;memdi&lt;/code&gt;&lt;/a&gt; and will have the following semantics.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;There will be a single master node and N follower nodes&lt;/li&gt;&lt;li&gt;Any node will accept the write request and write the key-value to the master&lt;/li&gt;&lt;li&gt;A write is considered successful if the data is stored in-memory on the master&lt;/li&gt;&lt;li&gt;Follower nodes can heal by requesting keys from the master&lt;/li&gt;&lt;li&gt;New follower nodes are manually added to a cluster (no discovery) and can request all keys from the master&lt;/li&gt;&lt;li&gt;All follower nodes perform a heartbeat with the master and can invoke a leader election, promoting themselves to a candidate&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I'm going to break the series into the following posts:&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;1.&amp;#95;building&amp;#95;out&amp;#95;a&amp;#95;skeleton&quot;&gt;&lt;/a&gt;1. Building out a skeleton&lt;/h3&gt;&lt;p&gt;We will get the basic of the application together, starting from a &lt;code&gt;lein new app memdi&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;2.&amp;#95;handling&amp;#95;our&amp;#95;first,&amp;#95;in&amp;#95;process,&amp;#95;replicated&amp;#95;write&quot;&gt;&lt;/a&gt;2. Handling our first, in process, replicated write&lt;/h3&gt;&lt;p&gt;We will create enough of the application to have the core concepts and will be able to handle a write to master node with in process replication.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;3.&amp;#95;handling&amp;#95;in&amp;#95;process&amp;#95;heartbeats&quot;&gt;&lt;/a&gt;3. Handling in process heartbeats&lt;/h3&gt;&lt;p&gt;Still working just in process we add the code required to handle heartbeats between master and follower nodes.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;4.&amp;#95;handling&amp;#95;in&amp;#95;process&amp;#95;elections&quot;&gt;&lt;/a&gt;4. Handling in process elections&lt;/h3&gt;&lt;p&gt;Here we add code required to manage an election process initiated by a follower node losing contact with the master.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;5.&amp;#95;handling&amp;#95;our&amp;#95;first&amp;#95;&quot;real&quot;&amp;#95;replicated&amp;#95;write&quot;&gt;&lt;/a&gt;5. Handling our first &quot;real&quot; replicated write&lt;/h3&gt;&lt;p&gt;We will be able to send a write request to the cluster and have the key-value replicate across &quot;real&quot; nodes as apposed to our in process nodes.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;6.&amp;#95;handling&amp;#95;heart&amp;#95;beats&amp;#95;across&amp;#95;nodes&quot;&gt;&lt;/a&gt;6. Handling heart beats across nodes&lt;/h3&gt;&lt;p&gt;We now add the functionality for follower nodes to monitor the masters heartbeat across process/machine boundaries.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;7.&amp;#95;handling&amp;#95;elections&quot;&gt;&lt;/a&gt;7. Handling elections&lt;/h3&gt;&lt;p&gt;Making use of the logic created previously we enable a follower node to initiate a leader elections across process/machine boundaries.&lt;/p&gt;&lt;p&gt;For all of the development above we will be using the repl as the client to our cluster. At some point we will want to develop a real client implementation. It would also be cool if we can design the store in such a way that it can optionally use asynchronous file IO to support durable writes and that we can configure it to treat a successful write as either in-memory or to-disk.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 12 May 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/09-05-2016-finally-v1-0-0-of-clj-ravendb-a-ravendb-client-for-clojure/
</guid>
<link>
http://markwoodhall.com/09-05-2016-finally-v1-0-0-of-clj-ravendb-a-ravendb-client-for-clojure/
</link>
<title>
Finally v1.0.0 of clj-ravendb, a RavenDB client for Clojure.
</title>
<description>
&lt;p&gt;TL;DR&lt;/p&gt;&lt;p&gt;I've finally found the time to add a few missing features and a sprinkling of love to &lt;a href='https://github.com/markwoodhall/clj-ravendb'&gt;clj-ravendb&lt;/a&gt; and given it a &lt;code&gt;1.0.0&lt;/code&gt; release. You can find the API docs &lt;a href='http://markwoodhall.github.io/clj-ravendb'&gt;here&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;Almost all of the information present in &lt;a href='http://markwoodhall.com/2014/06/21/using-ravendb-in-clojure-1/'&gt;these&lt;/a&gt; &lt;a href='http://markwoodhall.com/2014/06/21/using-ravendb-in-clojure-2/'&gt;three&lt;/a&gt; &lt;a href='http://markwoodhall.com/2014/06/22/using-ravendb-in-clojure-3/'&gt;articles&lt;/a&gt; is still correct, this post will highlight any differences and discuss new features.&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;what's&amp;#95;new&quot;&gt;&lt;/a&gt;What's new&lt;/h1&gt;&lt;h2&gt;&lt;a name=&quot;querying&amp;#95;indexes&quot;&gt;&lt;/a&gt;Querying indexes&lt;/h2&gt;&lt;h3&gt;&lt;a name=&quot;raw&amp;#95;lucene&amp;#95;query&quot;&gt;&lt;/a&gt;Raw lucene query&lt;/h3&gt;&lt;p&gt;For instances where &lt;code&gt;clj-ravendb&lt;/code&gt; offers no built in support for generating a query of a certain type it is now possible to use a raw lucene query.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/401e14b4dccf8acb1d91089088fd3433.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;range&amp;#95;queries&quot;&gt;&lt;/a&gt;Range queries&lt;/h3&gt;&lt;p&gt;There is now support for &lt;a href='https://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Range Searches'&gt;inclusive range queries&lt;/a&gt; using the following syntax.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/9d4e330a57dd983ecab829856f0ad451.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;creating&amp;#95;indexes&quot;&gt;&lt;/a&gt;Creating indexes&lt;/h2&gt;&lt;p&gt;Support for creating indexes has been around since early versions but it has changed since the articles mentioned above were published. Instead of supplying the where clause of an index using a string we can now do the following.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/1a54cc3f762e5e60530d602a939f312d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;analyzed&amp;#95;fields&quot;&gt;&lt;/a&gt;Analyzed fields&lt;/h3&gt;&lt;p&gt;As well as the new syntax for creating indexes I've also added the ability to specify &lt;a href='https://ravendb.net/docs/article-page/3.0/csharp/indexes/using-analyzers'&gt;anlyzed fields&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Using the &lt;code&gt;:fields&lt;/code&gt; key you can now specify various indexing options:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:Indexing&lt;/code&gt; - Configure the &lt;a href='https://github.com/ravendb/ravendb/blob/master/Raven.Abstractions/Indexing/FieldIndexing.cs'&gt;field indexing option&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;:Analyzer&lt;/code&gt; - Configure the &lt;a href='https://ravendb.net/docs/article-page/3.0/csharp/indexes/using-analyzers'&gt;analyzer&lt;/a&gt;, often just Lucences &lt;code&gt;StandardAnalyzer&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;:Storage&lt;/code&gt; - Configure &lt;a href='https://ravendb.net/docs/article-page/3.0/csharp/indexes/storing-data-in-index'&gt;storing data in an index&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/e7734e3bb25530e5a8521381afd5a12e.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;deleting&amp;#95;indexes&quot;&gt;&lt;/a&gt;Deleting indexes&lt;/h2&gt;&lt;p&gt;This is only a small enhancement but is now possible like so:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/60eb186d62c9f920a28fe206c059c28d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;oauth&amp;#95;support&quot;&gt;&lt;/a&gt;OAuth support&lt;/h2&gt;&lt;p&gt;There is now also support for OAuth authentication. You can create a client that support OAuth like so:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/86b26bc265422eb83d93e919e8bc27d2.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;If you plan on creating a client for the lifetime of your application it is worth &lt;b&gt;keeping in mind that the OAuth token will expire&lt;/b&gt;. Internally &lt;code&gt;clj-ravendb&lt;/code&gt; will request a new token based on the &lt;code&gt;:oauth-expiry-seconds&lt;/code&gt; configuration of the client. For example, a client configured to request a new token after 20 minutes can be created like so:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/bc0c78fefa6e07fde7772a7b96f27b48.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;If an &lt;code&gt;:oauth-expiry-seconds&lt;/code&gt; is not supplied then a default of &lt;code&gt;600&lt;/code&gt; seconds is used.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;caching&quot;&gt;&lt;/a&gt;Caching&lt;/h2&gt;&lt;p&gt;RavenDB has a number of caching methods in it's official .NET client, &lt;code&gt;clj-ravendb&lt;/code&gt; only supports no caching and a minimal version of &lt;a href='https://ravendb.net/docs/article-page/3.0/csharp/client-api/how-to/setup-aggressive-caching'&gt;aggressive caching&lt;/a&gt; at the moment.&lt;/p&gt;&lt;p&gt;To use aggressive caching specify the option when creating a client:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/52a8143654706a7380aa938445636644.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;When using aggressive caching &lt;em&gt;any&lt;/em&gt; request made using &lt;code&gt;load-documents&lt;/code&gt; will be cached for the lifetime of the client. Any changes made to documents using &lt;code&gt;put-document!&lt;/code&gt; or &lt;code&gt;bulk-operations!&lt;/code&gt; will be reflected in the clients local cache. When using replication keep in mind that data can become stale.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;some&amp;#95;notes&amp;#95;on&amp;#95;replication&quot;&gt;&lt;/a&gt;Some notes on replication&lt;/h2&gt;&lt;p&gt;When configured &lt;code&gt;clj-ravendb&lt;/code&gt; will inspect the &lt;code&gt;Raven/Replication/Destinations&lt;/code&gt; endpoint and failover to replicas when the primary node is unavailable. It is worth keeping in mind that this initial list of replicas is populated when the client is first created. &lt;b&gt;If you create a client that exists for the lifetime of your application then the list of replicas can become stale.&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;what's&amp;#95;left&amp;#95;to&amp;#95;do&quot;&gt;&lt;/a&gt;What's left to do&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;ClojureScript&lt;/em&gt; - When I started working on this I had the goal of adding support for ClojureScript. I've got a spike that is almost working, the main pain point left is generating HTTP requests in a consistent fashion.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Agressive Caching&lt;/em&gt; - Enable aggressive caching for a subset of documents. Usually aggressive caching is suitable for some document types but not others. Add a configuration option to specify how long the aggresive cache is valid for.&lt;/li&gt;&lt;li&gt;Replication - The .NET RavenDB client has support for round robin using all replicas. Currently &lt;code&gt;clj-ravendb&lt;/code&gt; only has support for reading/writing to a replica node when other nodes have failed.&lt;/li&gt;&lt;/ul&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 09 May 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/26-11-2015-how-to-fix-clojars-all-commits-point-to-head/
</guid>
<link>
http://markwoodhall.com/26-11-2015-how-to-fix-clojars-all-commits-point-to-head/
</link>
<title>
How to fix Clojars all commits point to HEAD.
</title>
<description>
&lt;p&gt;Recently I noticed an issue with one of the projects I deploy to Clojars. The &quot;Pushed by with this commit&quot; link was only ever linking back to HEAD on the GitHub repo.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;before&quot;&gt;&lt;/a&gt;Before&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/r0b3iWI.png&quot; alt=&quot;Clojars-before&quot; /&gt;&lt;/p&gt;&lt;p&gt;This only happens when you specify an &lt;code&gt;:scm&lt;/code&gt; key in your &lt;code&gt;project.clj&lt;/code&gt;. Without the &lt;code&gt;:scm&lt;/code&gt; key Leiningen will automatically discover the details from &lt;code&gt;.git&lt;/code&gt;. I believe the &lt;code&gt;:scm&lt;/code&gt; key was added for people using other systems, like HG.&lt;/p&gt;&lt;p&gt;I think there is a bug somewhere in Leiningen where the SCM info added to the artifacts &lt;code&gt;pom.xml&lt;/code&gt; isn't generated correctly when there is an &lt;code&gt;:scm&lt;/code&gt; key present. As soon as I removed the &lt;code&gt;:scm&lt;/code&gt; key with &lt;a href='https://github.com/markwoodhall/clova/commit/9cbc6bab1dc00fdd8e743f280a2ad0c294a857ef'&gt;this commit&lt;/a&gt; and did another Clojars deployment the problem was &quot;fixed&quot;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;after&quot;&gt;&lt;/a&gt;After&lt;/h3&gt;&lt;img src=&quot;http://i.imgur.com/Zx9iTP7.png&quot; alt=&quot;Clojars-after&quot; /&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 26 Nov 2015 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/24-12-2015-a-request-for-a-clojure-code-review/
</guid>
<link>
http://markwoodhall.com/24-12-2015-a-request-for-a-clojure-code-review/
</link>
<title>
A request for a Clojure code review!
</title>
<description>
&lt;p&gt;So, I've gradually been spending more time looking at and writing Clojure. I've read plenty of books and looked at &lt;a href='http://adambard.com/blog/five-mistakes-clojure-newbies-make/'&gt;useful blog posts&lt;/a&gt; and &lt;a href='https://aphyr.com/tags/Clojure-from-the-ground-up'&gt;articles&lt;/a&gt;. I've coded &lt;a href='https://github.com/markwoodhall/clj-tdo'&gt;a&lt;/a&gt; &lt;a href='https://github.com/markwoodhall/clj-ravendb'&gt;few&lt;/a&gt; things and tried to &lt;a href='http://markwoodhall.com/2015/03/04/event-sourcing-in-clojure/'&gt;write&lt;/a&gt; &lt;a href='http://markwoodhall.com/2014/11/19/creating-clj-tdo-a-command-line-todo-list-part-three/'&gt;a&lt;/a&gt; &lt;a href='http://markwoodhall.com/2014/06/23/destructuring-in-clojure/'&gt;few&lt;/a&gt; &lt;a href='http://markwoodhall.com/2014/06/22/using-ravendb-in-clojure-3/'&gt;blog&lt;/a&gt; posts. I'm still a newb though and the thought of ever writing Clojure for a living is far far away. I love the language, and the interactions I've had with the community so far have been great but the market for remote (or local) Clojure work is pretty slim.&lt;/p&gt;&lt;p&gt;Most recently I've started to look at ClojureScript a bit more and also started working on &lt;a href='https://github.com/markwoodhall/clova'&gt;a minimal Clojure(Script) validation library&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The trouble with learning a new language is that you never really have a guide for how you are doing. With that in mind I've got a request, it would be really really cool if I could get a few people to &quot;&lt;em&gt;code review&lt;/em&gt;&quot; &lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; for me. In order to contribute something back myself, for each &quot;&lt;em&gt;code review&lt;/em&gt;&quot;, submitted as a GitHub &lt;a href='https://github.com/markwoodhall/clova/issues'&gt;issue&lt;/a&gt; or &lt;a href='https://github.com/markwoodhall/clova/pulls'&gt;pull request&lt;/a&gt; I will donate $10 to the &lt;a href='https://salt.bountysource.com/teams/clojars'&gt;Clojars Team&lt;/a&gt;*. This is something I am already contributing to.&lt;/p&gt;&lt;p&gt;Since the point of this is to learn more, then any constructive criticism will be well received. As &lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; is open source it will also benefit others! If anyone ever uses it that is ;)&lt;/p&gt;&lt;p&gt;&amp;#42; If you want me to donate to something else in the Clojure community then let me know.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 24 Nov 2015 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/17-11-2015-introducing-clova-a-small-validation-library-for-clojure-and-clojurescript/
</guid>
<link>
http://markwoodhall.com/17-11-2015-introducing-clova-a-small-validation-library-for-clojure-and-clojurescript/
</link>
<title>
Introducing clova, a small validation library for Clojure and ClojureScript.
</title>
<description>
&lt;p&gt;TL;DR&lt;/p&gt;&lt;p&gt;I wrote a small validation library for Clojure and ClojureScript. It's &quot;alright&quot; and it's called &lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt;, I'd appreciate any feedback over on &lt;a href='https://github.com/markwoodhall/clova'&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;about&quot;&gt;&lt;/a&gt;About&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; is a small validation library written for Clojure and ClojureScript.&lt;/p&gt;&lt;p&gt;Existing libraries like &lt;a href='https://github.com/Prismatic/schema'&gt;Prismatic Schema&lt;/a&gt; offer much more functionality but that may not be what is required. &lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; focuses more on targeted validation, like checking if something is a url or an email address, instead of schematic validation.&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; supports ClojureScript to enable scenarios like server and client side sharing of validation logic. To do so it makes use of &lt;a href='http://dev.clojure.org/display/design/Reader+Conditionals'&gt;reader conditionals&lt;/a&gt; introduced in Clojure 1.7. Earlier versions used &lt;a href='https://github.com/lynaghk/cljx'&gt;cljx&lt;/a&gt; but that is considered deprecated because of the language support for reader conditionals.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;how&amp;#95;to&amp;#95;use&quot;&gt;&lt;/a&gt;How to use&lt;/h2&gt;&lt;p&gt;Add the following dependency to &lt;code&gt;project.clj :dependencies&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href='http://clojars.org/clova'&gt;&lt;img src=&quot;http://clojars.org/clova/latest-version.svg&quot; alt=&quot;Clojars Project&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Pull in the core namespace &lt;code&gt;&amp;#40;:require &amp;#91;clova.core :as core&amp;#93;&amp;#41;&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;define&amp;#95;a&amp;#95;validation&amp;#95;set&quot;&gt;&lt;/a&gt;Define a validation set&lt;/h3&gt;&lt;p&gt;Validation sets are pairs of keys to validate and the functions used to validate them.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/bce0cc499c7c6f4e3751.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;They support nested map access and validation functions can have variadic arity.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;defining&amp;#95;a&amp;#95;validator&quot;&gt;&lt;/a&gt;Defining a validator&lt;/h3&gt;&lt;p&gt;Validators are just functions with some meta data and are defined using the &lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-defvalidator'&gt;defvalidator&lt;/a&gt; macro.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/442996da139e1f539514.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;You can make use of the key name, value and any arguments passed to the validator in the &lt;code&gt;:default-message&lt;/code&gt;. The only thing to consider is the ordering of arguments, when the validation message is formatted it will supply the values in the following order: 1. The key to validate, 2. The current value, 3. The arguments passed to the validator (in the order they are specified).&lt;/p&gt;&lt;p&gt;It is worth noting that using positional arguments of the format &lt;code&gt;%1$s&lt;/code&gt; in &lt;code&gt;:default-message&lt;/code&gt; is supported in Clojure only. The string format function used in ClojureScript &lt;code&gt;goog.string.format&lt;/code&gt; does not support them.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;using&amp;#95;a&amp;#95;validation&amp;#95;set&quot;&gt;&lt;/a&gt;Using a validation set&lt;/h3&gt;&lt;p&gt;Using a validation set is simple. Pass the validation set you want to use and the map you wish to validate.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/48e91226ebff9a6c6f17.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Result is a map, including a valid? flag and a sequence of results.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/bbf879f9e2f8d5b3b751.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;You can view API documentation &lt;a href='http://markwoodhall.github.io/clova/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;built&amp;#95;in&amp;#95;validators&quot;&gt;&lt;/a&gt;Built in validators&lt;/h3&gt;&lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; includes the following validators as of v0.4.0.&lt;ol&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-between.3F'&gt;between?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-email.3F'&gt;email?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-greater.3F'&gt;greater?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-lesser.3F'&gt;lesser?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-matches.3F'&gt;matches?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-negative.3F'&gt;negative?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-positive.3F'&gt;positive?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-post-code.3F'&gt;post-code?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-present.3F'&gt;present?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-url.3F'&gt;url?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://markwoodhall.github.io/clova/clova.core.html#var-zip-code.3F'&gt;zip-code?&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;a name=&quot;positives&quot;&gt;&lt;/a&gt;Positives&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;It is easy to create and test new validators, the built in validators are simple pure functions.&lt;/li&gt;&lt;li&gt;Error messages are specific. For example, instead of &quot;Age must be in the specified range&quot; we get &quot;Age is 10 but it should be between 18 and 30&quot;.&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;a name=&quot;to&amp;#95;do&quot;&gt;&lt;/a&gt;To do&lt;/h3&gt;&lt;p&gt;&lt;del&gt;* Custom validation messages, probably localisable.&lt;/del&gt;&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;del&gt;* Composition of multiple validation functions per key.&lt;/del&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Make string interpolation for default messages more intuitive.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a name=&quot;alternatives&quot;&gt;&lt;/a&gt;Alternatives&lt;/h3&gt;&lt;p&gt;&lt;a href='https://github.com/markwoodhall/clova'&gt;clova&lt;/a&gt; is still new and prone to change, plus I'm still learning Clojure. Here are a couple of alternatives that are more stable.&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/leonardoborges/bouncer'&gt;bouncer&lt;/a&gt; | &lt;a href='https://github.com/michaelklishin/validateur'&gt;validateur&lt;/a&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 17 Nov 2015 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/04-03-2016-event-sourcing-in-clojure/
</guid>
<link>
http://markwoodhall.com/04-03-2016-event-sourcing-in-clojure/
</link>
<title>
Event sourcing in Clojure.
</title>
<description>
&lt;p&gt;Recently I came across &lt;a href='http://jen20.com/2015/02/08/event-sourcing-in-go.html'&gt;a blog post&lt;/a&gt; by &lt;a href='http://www.jen20.com'&gt;James Nugent&lt;/a&gt; that described some example patterns for implementing event sourcing in Go. I'm no expert, I've not studied much Go code before and I've never written any but I'd certainly have to agree with the observation James made, there is much less code than some C# implementations.&lt;/p&gt;&lt;p&gt;James made available the &lt;a href='https://github.com/jen20/go-event-sourcing-sample'&gt;code&lt;/a&gt; for his post on GitHub, so I thought it would be interesting to have a look and come up with a Clojure implementation based on the same domain. I'd suggest reading James &lt;a href='http://jen20.com/2015/02/08/event-sourcing-in-go.html'&gt;post&lt;/a&gt; as this one will follow the same structure.&lt;/p&gt;&lt;p&gt;FWIW, the comparison between Go and Clojure is a bit of an odd one really, this is just a bit of fun.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;events&quot;&gt;&lt;/a&gt;Events&lt;/h4&gt;&lt;p&gt;As per James's post we will use a simplified domain model of a frequent flier. James uses mutable Go structures to define his events, we can make use of immutable Clojure records. We could probably just use Clojure maps but I'm planning to perform dispatch based on the event type, so a record or type is probably more suitable.&lt;/p&gt;&lt;p&gt;If we really wanted to use maps then we could probably attach some meta data to them using Clojures &lt;a href='https://clojuredocs.org/clojure.core/with-meta'&gt;with-meta&lt;/a&gt; and then switch on that meta data. I don't think we need to worry about it though, Clojure records can be used as if they were maps in most scenarios.&lt;/p&gt;&lt;h6&gt;&lt;a name=&quot;go&quot;&gt;&lt;/a&gt;Go&lt;/h6&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/ff71bcea3c59031502f2.js&quot;&gt;&lt;/script&gt;&lt;h6&gt;&lt;a name=&quot;clojure&quot;&gt;&lt;/a&gt;Clojure&lt;/h6&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/b8fb86fd48a9c3b97466.js&quot;&gt;&lt;/script&gt;&lt;p&gt;Obviously the Clojure version of the events are dynamically typed, we could use &lt;a href='http://clojure.org/java_interop#Java%20Interop-Type%20Hints'&gt;type hints&lt;/a&gt; if we really wanted to.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;aggregates&quot;&gt;&lt;/a&gt;Aggregates&lt;/h4&gt;&lt;p&gt;In the Go example, James uses structs to represent aggregates and capture the state that will enable invariants during future behaviour, e.g. changing the frequent fliers status based on the stateful &quot;tier points&quot; value.&lt;h6&gt;&lt;a name=&quot;go&quot;&gt;&lt;/a&gt;Go&lt;/h6&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/1c515599c88b8ab96f4f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h6&gt;&lt;a name=&quot;clojure&quot;&gt;&lt;/a&gt;Clojure&lt;/h6&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/92edcee1840945f32cd2.js&quot;&gt;&lt;/script&gt;&lt;p&gt;Its worth noting that the Go code above uses a &lt;code&gt;Status&lt;/code&gt; enumeration to represent the frequent flier status, in the Clojure example I'll just be using the keys &lt;code&gt;:red&lt;/code&gt;, &lt;code&gt;:silver&lt;/code&gt; and &lt;code&gt;:gold&lt;/code&gt;.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;state&amp;#95;transition&amp;#95;and&amp;#95;change&amp;#95;tracking&quot;&gt;&lt;/a&gt;State transition and change tracking&lt;/h4&gt;&lt;h6&gt;&lt;a name=&quot;go&quot;&gt;&lt;/a&gt;Go&lt;/h6&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/b46e79eaf4c96c328a55.js&quot;&gt;&lt;/script&gt;&lt;h6&gt;&lt;a name=&quot;clojure&quot;&gt;&lt;/a&gt;Clojure&lt;/h6&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/f17dbe8e4e733a47a9bd.js&quot;&gt;&lt;/script&gt;&lt;p&gt;In general the Clojure version of the code implements the same pattern as the Go code. We call a function on the aggregate, perform some invariant checking if applicable, track the event and apply the &quot;state&quot; transition.&lt;/p&gt;&lt;p&gt;The Go version of the code switches based on the type of the event being processed and applies the state mutations.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/de5e3fb3c663064aeb40.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The Clojure version of the code uses a &lt;a href='http://clojure.org/multimethods'&gt;multimethod&lt;/a&gt; to dispatch based on the event type being processed, each chunk of &quot;state&quot; mutation is isolated in its own function. Of course, when we say mutation that's not true, since really we just return a new version of the aggregate with the updated &quot;state&quot;.&lt;/p&gt;&lt;p&gt;The Clojure code benefits from having no mutable state, each of the functions are pure in nature. James does mention in his post that having immutable records can make for a more elegant implementation. I'm not sure the Clojure version is &quot;more elegant&quot; but I think its pretty nice.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/6c4c91a7003be80fdb0f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;loading&amp;#95;history&quot;&gt;&lt;/a&gt;Loading history&lt;/h4&gt;&lt;h6&gt;&lt;a name=&quot;go&quot;&gt;&lt;/a&gt;Go&lt;/h6&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/dd2ae7c3781da691facc.js&quot;&gt;&lt;/script&gt;&lt;h6&gt;&lt;a name=&quot;clojure&quot;&gt;&lt;/a&gt;Clojure&lt;/h6&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/c9e0b3781389b517557e.js&quot;&gt;&lt;/script&gt;&lt;p&gt;In the situation where you need to hydrate an aggregate using a collection of past events I think the Clojure implementation is pretty neat. All we need to do is &lt;code&gt;&amp;#40;reduce transition ff history&amp;#41;&lt;/code&gt;. We reduce the history of events using the transition function and an inital default state frequent flier. If we had a massive number of events we could probably even use Clojures fold &lt;a href='http://clojure.org/reducers'&gt;reducer&lt;/a&gt;, this would carry out the reduce operation in parallel. We also assoc in an expected version based on the history.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;example&amp;#95;usage&quot;&gt;&lt;/a&gt;Example usage&lt;/h4&gt;&lt;h6&gt;&lt;a name=&quot;go&quot;&gt;&lt;/a&gt;Go&lt;/h6&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/5eb46d9d6fc16da4dc3a.js&quot;&gt;&lt;/script&gt;&lt;h6&gt;&lt;a name=&quot;clojure&quot;&gt;&lt;/a&gt;Clojure&lt;/h6&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/3b127c8b127ee43aac1f.js&quot;&gt;&lt;/script&gt;&lt;p&gt;Both of the above examples hydrate a frequent flier from a history of events and print out the aggregate. They then record another &lt;code&gt;FlightTaken&lt;/code&gt; event so that the accumulation of tier points causes an upgrade to gold status.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h4&gt;Have a look at both the &lt;a href='https://github.com/jen20/go-event-sourcing-sample'&gt;Go version&lt;/a&gt; and the &lt;a href='https://github.com/markwoodhall/clj-event-sourcing-sample'&gt;Clojure version&lt;/a&gt; and see what you think. I noticed a few things:&lt;ol&gt;&lt;li&gt;Lisp is beautiful (subjective at best)&lt;/li&gt;&lt;li&gt;Clojures immutability and built in support for things like map/reduce make things like hydrating an aggregate easy&lt;/li&gt;&lt;li&gt;Multimethods are quite a consice way of dispatching based on an event type&lt;/li&gt;&lt;li&gt;Go is a bit tricky to read but then again I am a total newbie&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If you know Clojure then please let me know if I'm doing anything really stupid or not very idiomatic by &lt;a href='https://github.com/markwoodhall/clj-event-sourcing-sample'&gt;sending a pull request&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I'm going to write a Clojure follow up post with a more complicated domain model and a storage implementation, probably using &lt;a href='https://geteventstore.com'&gt;Event Store&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 04 May 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/25-02-2015-using-new-relic-to-monitor-non-web-applications/
</guid>
<link>
http://markwoodhall.com/25-02-2015-using-new-relic-to-monitor-non-web-applications/
</link>
<title>
Using New Relic to monitor non web based Clojure applications.
</title>
<description>
&lt;p&gt;Recently I wanted to use &lt;a href='http://newrelic.com/'&gt;New Relic&lt;/a&gt; to monitor and profile a Clojure application. This specific application was a &quot;sentiment agent&quot; running as a daemon and calculating the sentiment of various URLS.&lt;/p&gt;&lt;p&gt;The rest of this post assumes that you've already created a &lt;a href='http://newrelic.com/'&gt;New Relic&lt;/a&gt; account and installed the &lt;a href='http://newrelic.com/'&gt;New Relic&lt;/a&gt; agent for your platform of choice.&lt;/p&gt;&lt;p&gt;In order to record basic information in &lt;a href='http://newrelic.com/'&gt;New Relic&lt;/a&gt; all I needed to do was start my application using &lt;code&gt;newrelic.jar&lt;/code&gt; as the &lt;code&gt;-javaagent&lt;/code&gt;. While not perfect I decided that I'd bundle &lt;code&gt;newrelic.jar&lt;/code&gt; and &lt;code&gt;newrelic.yml&lt;/code&gt; with my application, so I commited them to BitBucket.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java $JVM&amp;#95;OPTS -javaagent:newrelic/newrelic.jar -cp newrelic/newrelic.jar -jar target/sentimizer.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is enough to get basic metrics like memory and CPU but I'm used to using &lt;a href='http://newrelic.com/'&gt;New Relic&lt;/a&gt; for web applications and exploring the data it captures for &quot;Transactions&quot;.&lt;/p&gt;&lt;p&gt;This &lt;a href='http://blog.newrelic.com/2012/11/13/setting-up-custom-instrumentation-using-the-new-relic-java-agent/'&gt;blog post&lt;/a&gt; provides instructions for adding custom instrumentation to Java applications. All we really need to do is make sure &lt;code&gt;newrelic.jar&lt;/code&gt; is on the class path and that we have set &lt;code&gt;enable&amp;#95;custom&amp;#95;tracing&lt;/code&gt; equal to &lt;code&gt;true&lt;/code&gt;. Then we can &lt;code&gt;import com.newrelic.api.agent.Trace;&lt;/code&gt; and decorate the method we wish to consider a transaction with the &lt;code&gt;@Trace&amp;#40;dispatcher=true&amp;#41;&lt;/code&gt; annotation. The &lt;code&gt;dispatcher=true&lt;/code&gt; part is what tells &lt;a href='http://newrelic.com/'&gt;New Relic&lt;/a&gt; that we should consider this to be a new transaction.&lt;/p&gt;&lt;p&gt;As luck would have it, Clojure also has support for annotations. As far as I understand to be able to use annotations as we require, we need to use a record or type in Clojure. I just came up with the simple record below.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/d27c8957396caf172cce.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;This allows us to use a &lt;code&gt;Profiler&lt;/code&gt; to wrap any function and have its execution recorded as a &lt;a href='http://newrelic.com/'&gt;New Relic&lt;/a&gt; transaction. Like so:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/fd1295f7b51ff0f0dce7.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Instrumenting our function like this gives us much more detail. We will be able to see throughput and timings as well as a whole host of information relating to external resources, like databases, HTTP apis etc.&lt;/p&gt;&lt;p&gt;As an added bonus we can also uses &lt;a href='http://newrelic.com/thread-profiler'&gt;New Relics &quot;Thread Profiler&quot;&lt;/a&gt; to profile and find hot spots in our Clojure application.&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href='http://corfield.org/blog/post.cfm/instrumenting-clojure-for-new-relic-monitoring'&gt;Sean Corfield&lt;/a&gt; for documenting his efforts.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 25 Feb 2015 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/21-02-2015-things-i-learnt-about-vim-this-week/
</guid>
<link>
http://markwoodhall.com/21-02-2015-things-i-learnt-about-vim-this-week/
</link>
<title>
Things I learnt about Vim this week: Joining lines of text.
</title>
<description>
&lt;p&gt;I've been using Vim now for &lt;a href='http://www.markwoodhall.com/2014/11/13/thoughts-9-months-after-switching-to-vim/'&gt;over a year&lt;/a&gt; but I'm still increasingly amazed how little I know.&lt;/p&gt;&lt;p&gt;This week I've been writing some documentation in markdown. Working with text that isn't a programming language like C#, Clojure or JavaScript helped me to discover a few cool Vim commands I should have known already.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;joining&amp;#95;lines&amp;#95;of&amp;#95;text&quot;&gt;&lt;/a&gt;Joining lines of text&lt;/h3&gt;&lt;p&gt;Given the following block of text, when the cursor is on the first line we can use &lt;code&gt;J&lt;/code&gt; in normal mode to join the two lines of text.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;this is a line of text
and should be followed by this
&lt;/code&gt;&lt;/pre&gt;becomes&lt;pre&gt;&lt;code&gt;this is a line of text and should be followed by this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With text spread over three lines, like below, when the cursor is on the first line we can use &lt;code&gt;JJ&lt;/code&gt;  in normal mode to join the three lines of text.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;this is a line of text
and should be followed by this
and this
&lt;/code&gt;&lt;/pre&gt;becomes&lt;pre&gt;&lt;code&gt;this is a line of text and should be followed by this and this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Obviously, we can do better than bashing the &lt;code&gt;J&lt;/code&gt; key. Lets take the below text as an example. Vims composability means that &lt;code&gt;J&lt;/code&gt; is just another command we can apply to word motions, or selections. With the cursor on the first line of the text we can do &lt;code&gt;VGJ&lt;/code&gt;. &lt;code&gt;V&lt;/code&gt; goes into Visual mode, &lt;code&gt;G&lt;/code&gt; selects to the  bottom of the document and &lt;code&gt;J&lt;/code&gt; joins the selection.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;this is a line of text
and should be followed by this
and this line

this is a line of text
and should be followed by this
and this line

this is a line of text
and should be followed by this
and this line

this is a line of text
and should be followed by this
and this line
&lt;/code&gt;&lt;/pre&gt;becomes&lt;pre&gt;&lt;code&gt;this is a line of text and should be followed by this and this line this is a line of text and should be followed by this and this line this is a line of text and should be followed by this and this line this is a line of text and should be followed by this and this line
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thats pretty cool, since we can apply &lt;code&gt;J&lt;/code&gt; to selections we can do more too. If we take the text block below, when the cursor is on line 3, we can enter visual mode &lt;code&gt;V&lt;/code&gt;, select 2 lines down &lt;code&gt;2j&lt;/code&gt; and hit &lt;code&gt;J&lt;/code&gt; to join the selection.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;this is a line of text and should be followed by this and this line

this is a line of text
and should be followed by this
and this line

this is a line of text and should be followed by this and this line

this is a line of text and should be followed by this and this line
&lt;/code&gt;&lt;/pre&gt;becomes&lt;pre&gt;&lt;code&gt;this is a line of text and should be followed by this and this line

this is a line of text and should be followed by this and this line

this is a line of text and should be followed by this and this line

this is a line of text and should be followed by this and this line
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can apply the same principle using something more concrete as an example. What if we had the &lt;code&gt;if&lt;/code&gt; statement below and we'd rather just put the condition checking on one line. With the cursor positioned on the opening parentheses we can hit &lt;code&gt;V%J&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt; to go into Visual mode, &lt;code&gt;%&lt;/code&gt; to select to the closing parentheses and &lt;code&gt;J&lt;/code&gt; to join the text.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;if &amp;#40;1 == 1 &amp;amp;&amp;amp;
    2 == 2 &amp;amp;&amp;amp;
    3 == 3&amp;#41; {

}
&lt;/code&gt;&lt;/pre&gt;becomes&lt;pre&gt;&lt;code&gt;if &amp;#40;1 == 1 &amp;amp;&amp;amp; 2 == 2 &amp;amp;&amp;amp; 3 == 3&amp;#41; {

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that &lt;code&gt;J&lt;/code&gt; joins lines and includes an additional space between them. To join lines without the inclusion of an additional space you can use &lt;code&gt;gJ&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;A quick mention to a Vim plugin I was using when editing markdown. &lt;a href='https://github.com/shime/vim-livedown'&gt;vim-livedown&lt;/a&gt; uses a node module called livedown to preview markdown files in the browser as you edit them.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 21 Feb 2015 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/12-02-2015-using-a-clojure-repl-for-everyday-sql-tasks/
</guid>
<link>
http://markwoodhall.com/12-02-2015-using-a-clojure-repl-for-everyday-sql-tasks/
</link>
<title>
Using a Clojure REPL for everyday SQL tasks.
</title>
<description>
&lt;p&gt;I've described &lt;a href='http://markwoodhall.com/2014/11/13/thoughts-9-months-after-switching-to-vim/'&gt;previously&lt;/a&gt; how I've been trying to improve my tooling and move away from using GUI tools so much. As well as this I've also had a more general move away from Windows to OSX.&lt;/p&gt;&lt;p&gt;Since I'm spending most of the day doing Windows based development on the .NET Framework there are a couple of tools I keep using in a VM. I've managed to get rid of most of these but I've not really found a good replacement for SQL Server Management Studio. There is &lt;a href='http://razorsql.com/'&gt;Razor&lt;/a&gt; but I'm not very into that.&lt;/p&gt;&lt;p&gt;I've been spending more and more time doing Clojure development lately and consequently I've always got a Clojure REPL open. I thought it would be reasonably useful to setup a project I could use in the REPL to run the ad-hoc SQL queries I typically run throughout the day. I also get the added benefit of having query results as Clojure sequences and maps, which makes me happy. :)&lt;/p&gt;&lt;p&gt;The first thing I did to get started was create a new Clojure project. I called it &lt;code&gt;sqlrpl&lt;/code&gt; but thats not important.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new sqlrpl
&lt;/code&gt;&lt;/pre&gt;After that I added the &lt;a href='https://github.com/clojure/java.jdbc'&gt;java.jdbc&lt;/a&gt; dependency to &lt;code&gt;project.clj&lt;/code&gt;.&lt;pre&gt;&lt;code&gt;&amp;#91;org.clojure/java.jdbc &amp;quot;0.3.6&amp;quot;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;a href='https://github.com/clojure/java.jdbc'&gt;java.jdbc&lt;/a&gt; also has a dependency on the JDBC driver for the plaform you are using. I added the TDS driver for Microsoft SQL Server.&lt;pre&gt;&lt;code&gt;&amp;#91;net.sourceforge.jtds/jtds &amp;quot;1.2.4&amp;quot;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you've done this you can run a basic query by starting a clojure REPL:&lt;pre&gt;&lt;code&gt;lein repl
 &lt;/code&gt;&lt;/pre&gt; and then executing (after changing server details): &lt;script src=&quot;https://gist.github.com/anonymous/99c3539bf6d43059889e.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;This will return a sequence of maps, each map represents a single row returned by the query and will have keys matching the column names.&lt;/p&gt;&lt;p&gt;Obviously, doing this in the REPL isn't very friendly but since we have a lot of control we can write functions around this and make it easy to run queries.&lt;/p&gt;&lt;p&gt;I started building up a small DSL to compose queries, its very simple and functions follow a similar pattern. Each function returns a string generating function and combines it with the results of the &lt;code&gt;next-fn&lt;/code&gt;. &lt;script src=&quot;https://gist.github.com/anonymous/279871928daa14444415.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;This makes it easy to write queries like: &lt;script src=&quot;https://gist.github.com/anonymous/93792c730055d83f8d49.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;I also make use of two other functions: &lt;script src=&quot;https://gist.github.com/anonymous/408ce47ea20db3b23d88.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;This means we can run the following to look at the generated SQL: &lt;script src=&quot;https://gist.github.com/anonymous/c5fda5212abc822cbc50.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;And the following to execute the query: &lt;script src=&quot;https://gist.github.com/anonymous/87d0701a448e002d8346.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;I think this is pretty nice, and its relatively easy to implement. You also don't have to compose queries like this, you can just do something like: &lt;script src=&quot;https://gist.github.com/anonymous/f79ae640e864e44d3bfb.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;I also thought it would be nice to have completion for table/column names. So I came up with this (no doubt horrible) bit of Clojure. This defs symbols that match table/column names and return the table/column names.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/anonymous/004b426384f953bcf597.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;This means we don't have to use the string representation for our table/column names, we use the symbols defined for us, so we get completion in the REPL and our queries become:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/anonymous/ab0c161ed1a7f7145f38.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;What I've put together is pretty rubbish but its simple and I'm finding it really useful. If you want to look at a really good project that gives you &quot;Tasty SQL for Clojure&quot; check out &lt;a href='http://sqlkorma.com/'&gt;Korma&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I also have to give a hat tip to a plugin that has made working in the REPL even more awesome, &lt;a href='https://github.com/venantius/ultra'&gt;Ultra&lt;/a&gt;. The colorized REPL is awesome when you are doing stuff like this.&lt;/p&gt;&lt;p&gt;While I'm in no way trying to suggest this is a replacement for all the stuff I can do in SQL Server Management Studio, its a start. It covers about 90% of the stuff I do on a day to day basis.&lt;/p&gt;&lt;p&gt;If you want to have a play, the source is &lt;a href='https://bitbucket.org/markwoodhall/sqlrpl/overview'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;A couple of extra bits:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Generate a HTML table of our map sequence.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/anonymous/c56a2aac8e3203697d3f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/anonymous/79c62965aad1b2ecb7f8.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Generate an ASCII style string of our map sequence.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/anonymous/1c964720d341c7fdcc78.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/anonymous/1ba221e894f39f4629f7.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 12 Feb 2015 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/28-11-2016-analysing-news-sentiment-using-clojure-elasticsearch-and-kibana/
</guid>
<link>
http://markwoodhall.com/28-11-2016-analysing-news-sentiment-using-clojure-elasticsearch-and-kibana/
</link>
<title>
Analysing news sentiment using Clojure, Elasticsearch and Kibana.
</title>
<description>
&lt;p&gt;I've been working on a project recently to do with analysing the underlying sentiment found in online news stories. I wanted to have a play with &lt;a href='http://www.elasticsearch.org/overview/kibana/'&gt;Kibana&lt;/a&gt; to do some &quot;real time&quot; visualisations and I wanted to do it without using log files.&lt;/p&gt;&lt;p&gt;So, I came up with a small (less than 100 lines) Clojure program that would:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Query various popular news sites and analyse words using an open source lexicon dataset.&lt;/li&gt;&lt;li&gt;Filter any words that have little impact, like &quot;the&quot;.&lt;/li&gt;&lt;li&gt;Sanitize anything that may have contained HTML markup.&lt;/li&gt;&lt;li&gt;Store in &lt;a href='http://www.elasticsearch.org/'&gt;Elasticsearch&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I've left it running for ~24 hours and the results are interesting, if not very scientifically accurate.&lt;/p&gt;&lt;p&gt;It has aggregated data from the following source.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;BBC News&lt;/li&gt;&lt;li&gt;Sky News&lt;/li&gt;&lt;li&gt;Fox News&lt;/li&gt;&lt;li&gt;Huffington Post&lt;/li&gt;&lt;li&gt;Daily Mail&lt;/li&gt;&lt;li&gt;CNN&lt;/li&gt;&lt;li&gt;Telegraph&lt;/li&gt;&lt;li&gt;Reuters&lt;/li&gt;&lt;li&gt;Yahoo News&lt;/li&gt;&lt;li&gt;Google News&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;All of the results below assume 0 is a neutral sentiment, &lt;0 is a negative sentiment and &gt;0 is a positive one.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;daily&amp;#95;mail&amp;#95;(mailonline)&quot;&gt;&lt;/a&gt;Daily Mail (MailOnline)&lt;/h3&gt;Everyone knows the &lt;a href='http://www.dailymail.co.uk/home/index.html'&gt;Daily Mail&lt;/a&gt; is typical tabloid news, I expected that it would probably generate quite a negative sentiment. It was consistently the most negative.&lt;p&gt;&lt;a href='http://i.imgur.com/6ssw2Cc.png'&gt;&lt;img src=&quot;http://i.imgur.com/6ssw2Cc.png&quot; alt=&quot;DailyMail Sentiment&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;huffington&amp;#95;post&quot;&gt;&lt;/a&gt;Huffington Post&lt;/h3&gt;I didn't realise it before now but the &lt;a href='http://www.huffingtonpost.co.uk/'&gt;Huffington Post&lt;/a&gt; has quite a lot of positive news as well as some reasonably humorous articles. It was consistently the most postive. It also appears to publish a LOT and very frequently, which makes the graph a bit jumpy.&lt;p&gt;&lt;a href='http://i.imgur.com/6QarNI0.png'&gt;&lt;img src=&quot;http://i.imgur.com/6QarNI0.png&quot; alt=&quot;Huffington&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;bbc&amp;#95;news&quot;&gt;&lt;/a&gt;BBC News&lt;/h3&gt;I expected that the &lt;a href='http://www.bbc.co.uk'&gt;BBC&lt;/a&gt; might be quite consistent and might represent a good view of overall news sentiment. It was more negative than I expected, I guess that is just the world we live in.&lt;p&gt;&lt;a href='http://i.imgur.com/JbKKBWg.png'&gt;&lt;img src=&quot;http://i.imgur.com/JbKKBWg.png&quot; alt=&quot;BBC&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;All of the other news sources (Sky, Fox, CNN, Telegraph, Reuters, Yahoo, Google) trended much closer to a neutral sentiment.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;overall&quot;&gt;&lt;/a&gt;Overall&lt;/h3&gt;I think the overall sentiment may be a little off because of including the Huffington Post data, I think in the long run, the more sources I add the better the data will be.&lt;p&gt;&lt;a href='http://i.imgur.com/s4BhqJu.png'&gt;&lt;img src=&quot;http://i.imgur.com/s4BhqJu.png&quot; alt=&quot;Overall&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I'm planning to leave this running over a longer period and see how it gets on, it would be interesting for it to pick up a major news event, we will see.&lt;/p&gt;&lt;p&gt;For anyone interested, here is a screenshot of the Kibana dashboard.&lt;/p&gt;&lt;p&gt;&lt;a href='http://i.imgur.com/enIcLcC.png'&gt;&lt;img src=&quot;http://i.imgur.com/enIcLcC.png&quot; alt=&quot;Kibana&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I'll do a more technical post soon and make available the code once I'm finished.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 28 Nov 2014 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/19-11-2016-creating-clj-tdo-a-command-line-todo-list-part-three/
</guid>
<link>
http://markwoodhall.com/19-11-2016-creating-clj-tdo-a-command-line-todo-list-part-three/
</link>
<title>
Creating clj-tdo, a command line todo list, part 3.
</title>
<description>
&lt;p&gt;In the &lt;a href='http://www.markwoodhall.com/2014/11/11/creating-clj-tdo-a-command-line-todo-list-part-two/'&gt;previous post&lt;/a&gt; we made some improvements to the command line todo list we created.&lt;/p&gt;&lt;p&gt;In this post we will be making a few more improvements. You can get the code in its current state from &lt;a href='https://bitbucket.org/markwoodhall/clj-tdo'&gt;here&lt;/a&gt;, update to the part-2 tag.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;excluding&amp;#95;finished&amp;#95;tasks&quot;&gt;&lt;/a&gt;Excluding finished tasks&lt;/h3&gt;&lt;p&gt;I'm going to start off by fixing a few little issues. I want to change the default &lt;code&gt;ls&lt;/code&gt; action to exclude finished tasks and instead use the &lt;code&gt;-f&lt;/code&gt; option to show them.&lt;/p&gt;&lt;p&gt;First, lets change &lt;code&gt;src/clj-tdo/task.clj&lt;/code&gt; so that it makes available a &lt;code&gt;finished?&lt;/code&gt; function.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/4bd7fc5afffba95d956f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;src/clj-tdo/core.clj&lt;/code&gt;  will need to change as well, in order to capture the new &lt;code&gt;-f&lt;/code&gt; switch.&lt;/p&gt;&lt;p&gt; &lt;script src=&quot;https://gist.github.com/markwoodhall/dc5073fb3e9ada95d391.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt; Then we can update &lt;code&gt;src/clj-tdo/handlers.clj&lt;/code&gt; so that &lt;code&gt;list-tasks&lt;/code&gt; captures the &lt;code&gt;finished&lt;/code&gt; switch and does the appropriate filtering.&lt;/p&gt;&lt;p&gt; &lt;script src=&quot;https://gist.github.com/markwoodhall/03beacbee412aea72b46.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;improving&amp;#95;task&amp;#95;printing&quot;&gt;&lt;/a&gt;Improving task printing&lt;/h3&gt;&lt;p&gt;Create a new file &lt;code&gt;src/clj-tdo/printers.clj&lt;/code&gt;. Here we are going to define a &lt;code&gt;TaskPrinter&lt;/code&gt; &lt;a href='http://clojure.org/protocols'&gt;protocol&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/0508e8aee1423d018bfd.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The first implementation of this protocol will be very similar to the &lt;code&gt;prn-task&lt;/code&gt; function in &lt;code&gt;src/clj-tdo/task.clj&lt;/code&gt;, lets call it &lt;code&gt;DefaultTaskPrinter&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/4588cf8051d90d3a95ad.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We can also create a convenience function to create a &lt;code&gt;DefaultTaskPrinter&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/66ac5de36bd48ce931b6.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now we can make use of this in &lt;code&gt;src/clj-tdo/handlers.clj&lt;/code&gt;, first lets refer to the items we require.&lt;pre&gt;&lt;code&gt;&amp;#91;clj-tdo.printers :refer &amp;#91;TaskPrinter default-task-printer print-tasks&amp;#93;&amp;#93;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;list-tasks&lt;/code&gt; can now make use of the printer.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/e84789b738b9bf40f9df.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h4&gt;&lt;a name=&quot;adding&amp;#95;a&amp;#95;second&amp;#95;printer&amp;#95;and&amp;#95;the&amp;#95;&lt;code&gt;-p&lt;/code&gt;&amp;#95;switch&quot;&gt;&lt;/a&gt;Adding a second printer and the &lt;code&gt;-p&lt;/code&gt; switch&lt;/h4&gt;&lt;p&gt;Now, we can create a second &lt;code&gt;TaskPrinter&lt;/code&gt;. For this one we will just spit out the raw string as stored in the data file.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/889fbb9174984b66d6d4.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We can also remove the &lt;code&gt;default-task-printer&lt;/code&gt; and replace it with &lt;code&gt;create-task-printer&lt;/code&gt;. This will give us the &lt;code&gt;RawTaskPrinter&lt;/code&gt; if we ask for it, otherwise, it will give us the &lt;code&gt;DefaultTaskPrinter&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/ecd2ebb96d8cbe334ee9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now we need to hook up the &lt;code&gt;-p&lt;/code&gt; switch and capture the &quot;printer&quot; we wish to use. Add the definition below to our &lt;code&gt;cli-options&lt;/code&gt; in &lt;code&gt;src/clj-tdo/core.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/c3f490fa1080c2062aa9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We also need to update the desctructuring of function arguments in &lt;code&gt;list-tasks&lt;/code&gt; so that it captures the specified &lt;code&gt;printer&lt;/code&gt; and update our &lt;code&gt;print-tasks&lt;/code&gt; call so that is uses &lt;code&gt;create-task-printer&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/f46f98c66e83c9387259.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h3&gt;&lt;a name=&quot;identify&amp;#95;a&amp;#95;task&amp;#95;with&amp;#95;a&amp;#95;short&amp;#95;identifier&quot;&gt;&lt;/a&gt;Identify a task with a short identifier&lt;/h3&gt;&lt;p&gt;Currently tasks are identified and considered unique based on their &lt;code&gt;:title&lt;/code&gt;. This has generally been ok for me so far but it is irritating when trying to run a &lt;code&gt;done&lt;/code&gt; command like so.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tdo done -t &amp;quot;Some task with a long title and maybe some kind of punctionation?!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It would be useful to be able to add a short title or identifier to a task. This is particularly useful for me as I can use an id from a bug tracker like &lt;a href='http://www.fogcreek.com/fogbugz/'&gt;FogBugz&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Lets start by updating the definition of the &lt;code&gt;Task&lt;/code&gt; record in &lt;code&gt;src/clj-tdo/task.clj&lt;/code&gt; to include an &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/271a1de7dd40298567d4.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We will also need to update the &lt;code&gt;create&lt;/code&gt; function so that it desctructures &lt;code&gt;id&lt;/code&gt; and uses it in the &lt;code&gt;-&amp;gt;Task&lt;/code&gt; call.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/ce7ef428648f9d361389.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The logic that stores tasks in &lt;code&gt;src/clj-tdo/stores.clj&lt;/code&gt; will also need to change. It currently filters out an existing task by title and then replaces it with its new equivalent. We will change this so that it uses the new &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/90bfc352b1079b5c28eb.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now we can update the &lt;code&gt;DefaultTaskPrinter&lt;/code&gt; in &lt;code&gt;src/clj-tdo/printers.clj&lt;/code&gt; so that it ouputs the new &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/1b375e316b43902fc4d0.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;do-task&lt;/code&gt; function in &lt;code&gt;src/clj-tdo/handlers.clj&lt;/code&gt; also has logic that identifies which task to mark as done, we need to change that to use the new &lt;code&gt;id&lt;/code&gt; as well.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/bb7b157c4ac2f061e7c1.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;All thats left to do now is update our &lt;code&gt;cli-options&lt;/code&gt; in &lt;code&gt;src/clj-tdo/core.clj&lt;/code&gt; to capture &lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;&amp;ndash;id&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/728787de60bc0c27539b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h3&gt;&lt;a name=&quot;improving&amp;#95;documentation&quot;&gt;&lt;/a&gt;Improving documentation&lt;/h3&gt;&lt;p&gt;The last thing we will change in this post is the definition of &lt;code&gt;help&lt;/code&gt; in &lt;code&gt;src/clj-tdo/core.clj&lt;/code&gt;. I think its useful to include a few examples of commands and switches.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/391c42d6659ee649e1d8.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;I think we made some good changes in this post, specifically around printing. Next time it will be interesting to allow better status support and then make use of those statuses to print a &quot;swim lane&quot; style task board.&lt;/p&gt;&lt;p&gt;You can get the code in its current state from &lt;a href='https://bitbucket.org/markwoodhall/clj-tdo'&gt;here&lt;/a&gt;, update to the part-3 tag.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 19 Nov 2014 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/16-11-2014-use-drip-to-make-your-clojure-applications-start-faster/
</guid>
<link>
http://markwoodhall.com/16-11-2014-use-drip-to-make-your-clojure-applications-start-faster/
</link>
<title>
Use drip to make your Clojure (or Java) application start faster.
</title>
<description>
&lt;p&gt;I like writing command line applications in Clojure. I think its quite a good experience when using something like &lt;a href='https://github.com/clojure/tools.cli'&gt;tools.cli&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;One thing thats always bothered me though, is the start up time of the JVM. When you expect a command line application to be instant and responsive its frustrating to experience a long start up time. &lt;a href='https://github.com/ninjudd/drip.git'&gt;Drip&lt;/a&gt; can help reduce those startup times.&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href='http://ninjudd.com/'&gt;Justin Balthrop&lt;/a&gt; for building Drip. Justin describes Drip like so:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &quot;Unlike other tools intended to solve the JVM startup problem (e.g. Nailgun, Cake), Drip does not use a persistent JVM. There are many pitfalls to using a persistent JVM, which we discovered while working on the Cake build tool for Clojure. The main problem is that the state of the persistent JVM gets dirty over time, producing strange errors and requiring liberal use of cake kill whenever any error is encountered, just in case dirty state is the cause. &lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Instead of going down this road, Drip uses a different strategy. It keeps a fresh JVM spun up in reserve with the correct classpath and other JVM options so you can quickly connect and use it when needed, then throw it away. Drip hashes the JVM options and stores information about how to connect to the JVM in a directory with the hash value as its name.&quot; &lt;a href='https://github.com/ninjudd/drip.git'&gt;See more..&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;First you need to install Drip. I installed on OS X using brew.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;brew install drip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The example below is a trivial one, it is using the &lt;a href='http://www.markwoodhall.com/creating-clj-tdo-a-command-line-todo-list/'&gt;command line todo list we started building&lt;/a&gt;. In the example, &lt;code&gt;tdo&lt;/code&gt; is aliased like so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;alias tdo='drip -jar clj-tdo-0.1.0-SNAPSHOT-standalone.jar'
`

`tdoj` has a similar alias but doesn't make use of Drip:

&lt;/code&gt;&lt;/pre&gt;alias tdoj='java -jar clj-tdo-0.1.0-SNAPSHOT-standalone.jar'`&lt;p&gt;Notice that nothing needs to change, other than the &lt;code&gt;java&lt;/code&gt; or &lt;code&gt;drip&lt;/code&gt; command, its even possible to alias &lt;code&gt;java&lt;/code&gt; to &lt;code&gt;drip&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Here is a capture of running those two commands.&lt;/p&gt;&lt;p&gt;{&lt;1&gt;}&lt;img src=&quot;http://i.imgur.com/axD8Rjz.gif&quot; alt=&quot;drip&quot; /&gt;&lt;/p&gt;&lt;p&gt;You can tell from the capture that it makes quite a difference. Its even more noticable on slower machines.&lt;/p&gt;&lt;p&gt;If only there was a way of speeding up the &quot;tear down&quot; phase. You can see in the example above, even after the command has finished and the output rendered we still have a wait before we can execute the next command.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 16 Nov 2014 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/13-11-2014-thoughts-9-months-after-switching-to-vim/
</guid>
<link>
http://markwoodhall.com/13-11-2014-thoughts-9-months-after-switching-to-vim/
</link>
<title>
Thoughts 9 months after switching to Vim for .NET.
</title>
<description>
&lt;p&gt;It was about 9 months ago that I first started trying to invest in using Vim. Up to then I'd spent nearly 100% of development time in Visual Studio. If I was playing around learning something new then I might use Sublime Text.&lt;/p&gt;&lt;p&gt;My first experience of Vim was some years ago and it was very brief, at the time I was doing some development in PHP and I remember, when initially firing up vim, thinking I'd downloaded the wrong thing. I moved quickly onto NuSphere PhpEd.&lt;/p&gt;&lt;p&gt;Fast forward a good few years and I decided to spend some time getting comfortable in Vim, initially by doing Clojure development. Once I felt comfortable I was ready to give .NET a go, hopefully I'd be productive enough to use it for the day job as well.&lt;/p&gt;&lt;p&gt;At this point I was mostly using terminal Vim on Windows. With the fantastic &lt;a href='https://code.google.com/p/conemu-maximus5/'&gt;ConEmu&lt;/a&gt; I was able to get a really great setup with decent colour support in the terminal.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;essential&amp;#95;plugins&quot;&gt;&lt;/a&gt;Essential Plugins&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://www.omnisharp.net/'&gt;OmniSharp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;OmniSharp is just awesome. It is made up of a &lt;a href='https://github.com/OmniSharp/omnisharp-vim'&gt;client&lt;/a&gt; and &lt;a href='https://github.com/OmniSharp/omnisharp-server'&gt;server&lt;/a&gt;. The client consumes an API exposed by the server over HTTP. There are clients available for a number of text editors that allow us to make use of functionality from &lt;a href='https://github.com/icsharpcode/NRefactory'&gt;NRefactory&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;It gives us the following:&lt;/p&gt;&lt;p&gt;-	Code completion&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Find types, implementations and usages&lt;/li&gt;&lt;li&gt;Refactoring suggestions&lt;/li&gt;&lt;li&gt;Building&lt;/li&gt;&lt;li&gt;Test runner&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There is way more though, have a look at the &lt;a href='https://github.com/OmniSharp/omnisharp-vim'&gt;OmniSharp&lt;/a&gt; github page.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/kien/ctrlp.vim'&gt;ctrlp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ctrlp is a fuzzy file search plugin, for ReSharper users it gives you functionality like &quot;Go to File&quot;. I use ctrlp so much, especially when I'm working on a project that follows good structural and naming conventions.&lt;/p&gt;&lt;p&gt;Again, this is very brief, there is much more to ctrlp so go and &lt;a href='https://github.com/kien/ctrlp.vim'&gt;check it out&lt;/a&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/scrooloose/nerdtree'&gt;NerdTREE&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Although I'm finding files 99% of the time using CtrlP sometimes I do need that help you get from looking at a visual tree of files. NerdTREE allows easy file/directory navigation and manipulation. These days though I'm only using it to get a mental picture of the structure of unfamiliar projects.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/Shougo/neocomplete.vim'&gt;neocomplete&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In order to get code completion as you type you can install the neocomplete plugin, it is a little bit more complicated to install than some other plugins and it requires that you have a Vim install with Lua enabled.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;improving&amp;#95;the&amp;#95;experience&quot;&gt;&lt;/a&gt;Improving the experience&lt;/h2&gt;&lt;p&gt;I think thats probably it for essential plugins, there are however a few more plugins that really improve the experience.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://ctags.sourceforge.net/'&gt;Exuberant Ctags&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This isnt actually a plugin but a command line utility that generates an index of all identifiers (tags) in a project, so for C# we end up with an index of classes, interfaces, methods etc. Using Vim you can easily navigate a project by tags. I like mapping &lt;code&gt;&amp;lt;leader&amp;gt;}&lt;/code&gt; to jump to the tag under the cursor. &lt;a href='https://github.com/kien/ctrlp.vim'&gt;ctrlp&lt;/a&gt; also has support for fuzzy match searching of tags.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/kien/ctrlp.vim'&gt;vim-csharp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;vim-csharp has a bunch of useful functionality for working with C# in Vim. I just use it as it provides better syntax highlighting than standard.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/scrooloose/syntastic'&gt;syntastic&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Syntastic is an awesome syntax checking plugin for Vim, it has support for lots of languages and shows syntax errors in a number of ways.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A list of syntax errors in the location list&lt;/li&gt;&lt;li&gt;Shows the syntax error for the position of the cursor in the command window&lt;/li&gt;&lt;li&gt;Signs are displayed in the gutter for lines with syntax errors&lt;/li&gt;&lt;li&gt;Error ballons when the mouse is hovered over a syntax error&lt;/li&gt;&lt;li&gt;Parts of a line have syntax errors highlighted&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;scaffolding&quot;&gt;&lt;/a&gt;Scaffolding&lt;/h2&gt;In order to scaffold .NET solutions I'm making use of &lt;a href='http://gruntjs.com/project-scaffolding'&gt;grunt-init&lt;/a&gt;. Its really easy to create templates of common .NET projects.&lt;h2&gt;&lt;a name=&quot;scripting&quot;&gt;&lt;/a&gt;Scripting&lt;/h2&gt;&lt;p&gt;While &lt;a href='http://www.omnisharp.net/'&gt;OmniSharp&lt;/a&gt; provides good functionality for building and testing I decided to write a few simple scripts to handle that for me.&lt;/p&gt;&lt;p&gt;Initially these were PowerShell scripts. Since I was using the bash bundled with &lt;a href='http://msysgit.github.io/'&gt;mysysgit&lt;/a&gt; as the shell for ConEmu I created bash aliases to make calling them simpler.&lt;/p&gt;&lt;p&gt;The following are the bash aliases I setup.&lt;/p&gt;&lt;p&gt;&lt;code&gt;rmsb&lt;/code&gt; - Recursively calls msbuild for all *.sln files in the current directory.&lt;/p&gt;&lt;p&gt;&lt;code&gt;rtest&lt;/code&gt; - Recursivly calls common tests runners for all *.Tests.&amp;#42;.dll in the current directory.&lt;/p&gt;&lt;p&gt;&lt;code&gt;rbt&lt;/code&gt; - Calls rmsb and rtest&lt;/p&gt;&lt;p&gt;&lt;code&gt;autocmd $cmd&lt;/code&gt; - Watches the current directory for changes to &amp;#42;.cs|&amp;#42;.csproj|*.config etc and calls the specified command. So &lt;code&gt;autocmd rbt&lt;/code&gt; watches and triggers a build/test when there are changes.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;rolling&amp;#95;with&amp;#95;it&quot;&gt;&lt;/a&gt;Rolling with it&lt;/h2&gt;&lt;p&gt;I settled on this setup and stuck with it for 4-5 months. It was generally pretty awesome and I felt as productive as I was before. I was working on both personal projects and projects for my day job, developing great software at &lt;a href='http://www.bybox.com/'&gt;ByBox&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;little&amp;#95;niggles&quot;&gt;&lt;/a&gt;Little niggles&lt;/h4&gt;There were however a few little problems, some of them I'd spent a ridiculous number of hours trying to fix.&lt;p&gt;The biggest thing that I couldn't easily manage outside of Visual Studio was installing NuGet packages that had a dependency on the DTE environment, to this day there still isn't a good story for that.&lt;/p&gt;&lt;p&gt;I was also feeling a bit limited by terminal support in Windows and I had some annoying screen rendering issues with ConEmu and Vim. It was totally useable but I wanted it to be better.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;big&amp;#95;changes&quot;&gt;&lt;/a&gt;Big changes&lt;/h2&gt;&lt;p&gt;I'd seen screenshots and videos of other people using similar setups on Linux and OS X and everything was much more polished. I decided I should try it out, so instead of using my Windows VM I started using OS X on my iMac.&lt;/p&gt;&lt;p&gt;Now, I knew I could roll with using Mono for my personal projects but I also knew that wouldn't be possible for the day job. Even if I could reliably build all the projects with Mono, all of the related scripting would be reliant on PowerShell and Windows.&lt;/p&gt;&lt;p&gt;In an ideal world I'd have setup an SSH server on Windows, used iTerm2, SSH'd to the Windows box and called it a day but I had endless problems with terminal colors and weird cursor behaviour and a host of other little things.&lt;/p&gt;&lt;p&gt;So, in the end, I decided I should do as much as possible on OS X and decided on the following:&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;os&amp;#95;x&quot;&gt;&lt;/a&gt;OS X&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;iTerm2/Tmux/Vim (With all the above mentioned plugins)&lt;/li&gt;&lt;li&gt;Source code (hg/git)&lt;/li&gt;&lt;li&gt;Port the &lt;code&gt;autocmd&lt;/code&gt; alias mentioned above to bash&lt;/li&gt;&lt;li&gt;Bash scripting to &lt;code&gt;tar&lt;/code&gt;, &lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;scp&lt;/code&gt; the current working directory to a mirror location on a remote box&lt;/li&gt;&lt;li&gt;Aliases to make &lt;code&gt;scp&lt;/code&gt; operations easier.&lt;/li&gt;&lt;li&gt;- &lt;code&gt;scpmk&lt;/code&gt; - Does a full copy of the working directory over SSH&lt;ul&gt;&lt;li&gt;&lt;code&gt;scpwd&lt;/code&gt; - Does a partial copy of the working   directory over SSH based on differences reported by hg or git&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;srcpd $pattern&lt;/code&gt; - Does a copy of remote files matching &lt;code&gt;$pattern&lt;/code&gt; via SSH to the working directory&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Aliases for &lt;code&gt;rmsb&lt;/code&gt; and &lt;code&gt;rbt&lt;/code&gt; that run over SSH and so build and test on Windows&lt;/li&gt;&lt;li&gt;The &lt;code&gt;rmsb&lt;/code&gt; alias starts a background job to &lt;code&gt;srcpd /Packages/&amp;#42;&lt;/code&gt; so that NuGet packages are pulled down to OS X and the OmniSharp server can find them for code completion. If I had access to corporate VPN from OS X I'd just run NuGet locally and be done with it&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;a name=&quot;windows&quot;&gt;&lt;/a&gt;Windows&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Msbuild, test runners, iisexpress, sql server&lt;/li&gt;&lt;li&gt;Sql server management studio (I am using the &lt;a href='https://github.com/vim-scripts/dbext.vim'&gt;dbext plugin&lt;/a&gt; for Vim to run basic queries)&lt;/li&gt;&lt;li&gt;VPNS required for work that aren't compatible with OS X (Also aliased for easy use over SSH)&lt;/li&gt;&lt;li&gt;SSH server&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This structure makes it possible to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Clone a project on OS X using hg/git&lt;/li&gt;&lt;li&gt;Init that project on the remote Windows box, using &lt;code&gt;scpmk&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Start an &lt;code&gt;autocmd rbt&lt;/code&gt; in bash on OS X&lt;/li&gt;&lt;li&gt;Make some code changes using Vim on OS X&lt;/li&gt;&lt;li&gt;The &lt;code&gt;autocmd rbt&lt;/code&gt; picks up the change, does an &lt;code&gt;scpwd&lt;/code&gt; to copy the differences to the remote windows box and then issues the &lt;code&gt;rbt&lt;/code&gt; command over SSH to run a build and test&lt;/li&gt;&lt;li&gt;Commit changes from OS X using hg/git&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;This is all much nicer than it sounds and using the tools outside of Windows has been a much better experience. Keep in mind that I'm jumping through hoops that aren't relevant if you just make use of Mono, I can't really get away without building and testing on a Windows box.&lt;/p&gt;&lt;p&gt;Many of these issues will hopefully go away as the &lt;a href='http://news.microsoft.com/2014/11/12/microsoft-takes-net-open-source-and-cross-platform-adds-new-development-capabilities-with-visual-studio-2015-net-2015-and-visual-studio-online/'&gt;.NET platform becomes more open and we get compatability with Linux and OS X&lt;/a&gt;. Its a great time to be doing .NET development.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;positives&quot;&gt;&lt;/a&gt;The positives&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Transferable knowledge&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using Vim as a primary editor for a variety of languages means that none of the investment is wasted. If you move onto a different language in the future its pretty certain Vim will have support for it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The command line&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Working using a combination of iTerm2, Tmux, Vim and SSH is really quite nice. It forces you to learn more about the command line and become less reliant on the mouse, ultimately I think this is a productivity win.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Cross platform editor&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Since Vim is cross platform, again, the investment put into learning it means that you can take your development skills anywhere. Version controlling your dot files makes this pretty easy.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Not relying on Visual Studio&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There is nothing wrong with Visual Studio but I think breaking the reliance is a good thing. Being able to do development in whatever environment suits you is a liberating feeling.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Using Vim every day&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Not only is it totally awesome but it started a chain of learning that I think will change the way I develop for the better.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;negatives&quot;&gt;&lt;/a&gt;The negatives&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;NuGet support&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While there is some level of NuGet support outside of Visual Studio you can't rely on it for everything. Packages that use Visual Studios DTE will be problomatic.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Pairing&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Pairing with colleagues who may have an expectation that you are using Visual Studio can be awkward.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Debugging&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Visual Studio has an awesome debugger. In some scenarios I'll fire it up just to debug an issue but mostly I've found that making subtle improvements to logging and tests not only help investigate the issue but also have a positive impact in the long term.&lt;/p&gt;&lt;p&gt;Here are a couple of videos.&lt;/p&gt;&lt;p&gt;&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/bl58hR1FpAI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/73B3QHMqNRs&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 13 Nov 2014 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/11-11-2016-creating-clj-tdo-a-command-line-todo-list-part-two/
</guid>
<link>
http://markwoodhall.com/11-11-2016-creating-clj-tdo-a-command-line-todo-list-part-two/
</link>
<title>
Creating clj-tdo, a command line todo list, part 2.
</title>
<description>
&lt;p&gt;In the &lt;a href='http://www.markwoodhall.com/2014/07/02/creating-clj-tdo-a-command-line-todo-list/'&gt;previous post&lt;/a&gt; we created a very simple command line todo list in clojure.&lt;/p&gt;&lt;p&gt;In this post we will be making a few improvements. You can get the code in its current state from &lt;a href='https://bitbucket.org/markwoodhall/clj-tdo'&gt;here&lt;/a&gt;, update to the &lt;code&gt;part-1&lt;/code&gt; tag.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;pulling&amp;#95;out&amp;#95;task.clj&quot;&gt;&lt;/a&gt;Pulling out task.clj&lt;/h3&gt;&lt;p&gt;Lets start by pulling out some of the task related functionality into its own namespace. Create a new file &lt;code&gt;src/clj-tdo/task.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;If we pull out the &lt;code&gt;Task&lt;/code&gt; record, the &lt;code&gt;overdue?&lt;/code&gt;,&lt;code&gt;due-on?&lt;/code&gt; and &lt;code&gt;finish&lt;/code&gt; functions we should end up with something like this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/561c501b801bcfd5feb2.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;I've also added a &lt;code&gt;create&lt;/code&gt; function to get rid of the date mangling and task creation from &lt;code&gt;handlers.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We now need to make some changes to &lt;code&gt;handlers.clj&lt;/code&gt; in order to make use of the functions we created in &lt;code&gt;task.clj&lt;/code&gt;. First, we require &lt;code&gt;&amp;#91;clj-tdo.task :as task&amp;#93;. &lt;/code&gt;&lt;/p&gt;&lt;p&gt;Then we need to update the usages of &lt;code&gt;overdue?&lt;/code&gt;, &lt;code&gt;due-on?&lt;/code&gt; and &lt;code&gt;finish&lt;/code&gt; so that they reference the namespace. This should leave us with a &lt;code&gt;handlers.clj&lt;/code&gt; like so.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/6783d299310bd223af9d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;I think its time to show the horrible &lt;code&gt;prn-task&lt;/code&gt; function some love. In its current state, it looks like this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/937fae4503e60d600665.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Initially we can start by moving it into &lt;code&gt;src/clj-tdo/task.clj&lt;/code&gt;. We will also need to move the &lt;code&gt;style-str&lt;/code&gt; function and the referenced &lt;code&gt;clansi.core&lt;/code&gt; namespace. This doesn't really feel like the right place to put &lt;code&gt;style-str&lt;/code&gt;, we will find somewhere better for it eventually. &lt;code&gt;src/clj-tdo/task.clj&lt;/code&gt; now looks like this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/c30dd50f04ca5a9d39ea.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;I think we should improve &lt;code&gt;prn-task&lt;/code&gt; by pulling out some of the repeated logic into a new namespace, lets create &lt;code&gt;src/clj-tdo/rendering.clj&lt;/code&gt;. I think this is also a reasonable place to move the &lt;code&gt;style-str&lt;/code&gt; function to. Lets start with this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/0d58ac0964912c86e2a6.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Obviously we need to update &lt;code&gt;src/clj-tdo/task.clj&lt;/code&gt; so that it uses &lt;code&gt;style-str&lt;/code&gt; from &lt;code&gt;src/clj-tdo/rendering.clj&lt;/code&gt;, I'll leave that out here though.&lt;/p&gt;&lt;p&gt;The next thing I'd like to do is remove the duplication of checking a condition and outputing a &quot;checkbox&quot;. For that I'll create a &lt;code&gt;checkbox&lt;/code&gt; function in &lt;code&gt;src/clj-tdo/rendering.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/9d917a1c3f543617ffec.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;I'd also like to make padding strings a little neater. So I'll create &lt;code&gt;pad-right&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/782fe54ef32fa423a7cb.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;I also add a &lt;code&gt;field&lt;/code&gt; function and then realise I can make use of it in &lt;code&gt;checkbox&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/53b2a648e145bfa915c3.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now, I update the &lt;code&gt;prn-task&lt;/code&gt; function to make use of the functions we just created.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/485ff5244da88bd921a1.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Notice that I also made the &quot;printer&quot; a function argument, in our case we will be passing through &lt;code&gt;println&lt;/code&gt; in &lt;code&gt;src/clj-tdo/handlers.clj&lt;/code&gt;. I'm still not too happy with the style and colour mapping but we can look at that next time.&lt;/p&gt;&lt;p&gt;The code in its current state is available &lt;a href='https://bitbucket.org/markwoodhall/clj-tdo'&gt;here&lt;/a&gt;, update to the &lt;code&gt;part-2&lt;/code&gt; tag.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 11 Nov 2014 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/02-07-2014-creating-clj-tdo-a-command-line-todo-list/
</guid>
<link>
http://markwoodhall.com/02-07-2014-creating-clj-tdo-a-command-line-todo-list/
</link>
<title>
Creating clj-tdo, a command line todo list.
</title>
<description>
&lt;p&gt;Using a todo list really appeals to me, I often find I go back to using one if I'm going through a period of not getting much done.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;current&amp;#95;applications&quot;&gt;&lt;/a&gt;Current applications&lt;/h2&gt;There are already a number of a good command line todo lists.&lt;ol&gt;&lt;li&gt;&lt;a href='http://taskwarrior.org/'&gt;Taskwarrior&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://todotxt.com/'&gt;Todo.txt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://stevelosh.com/projects/t/'&gt;t&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I especially like the look of &lt;a href='http://stevelosh.com/projects/t/'&gt;t&lt;/a&gt;, its simple and focuses on keeping out of the way. If I was just interested in finding a command line to do list I would probably just install &lt;a href='http://stevelosh.com/projects/t/'&gt;t&lt;/a&gt;. I have an agenda though, I also want to learn some more Clojure.&lt;/p&gt;&lt;p&gt;With this in mind I plan on creating:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;A &lt;a href='https://github.com/weavejester/compojure'&gt;compojure&lt;/a&gt; based API for managing tasks&lt;/li&gt;&lt;li&gt;A command line client with local storage and &quot;push&quot; to server&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I wanted to use a compojure API to get some experience of deploying Clojure to windows azure. I also want to take this as an opportunity to use azure storage. At present it doesn't look like there is a stable and feature complete azure library in Clojure. The closest thing I can see is &lt;a href='https://github.com/RobBlackwell/clj-azure'&gt;clj-azure&lt;/a&gt;, maybe I can make some contributions to that project as I go along or create something to wrap the &lt;a href='http://azure.microsoft.com/en-us/develop/java/'&gt;Java Azure SDK&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Anyway, I can forget all that initially. It makes sense to at least create a basic command line client and worry about everything else after.&lt;/p&gt;&lt;p&gt;From previous experience I know that command line applications in Clojure can sometimes suffer as a result of the relatively slow JVM start up times, although thats unfair to the JVM as Clojure is also part of the problem. I'll also take this as an opportunity to try &lt;a href='https://github.com/ninjudd/drip'&gt;drip&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Drip is a launcher for the Java Virtual Machine that provides much faster startup times than the java command. The drip script is intended to be a drop-in replacement for the java command, only faster. &lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Drip is a single bash script and a little bit of C and Java code. It is intended to work with any JVM-based language and anywhere bash is available. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I'll be writing regular posts as I go along and making the source available for anyone who wants to learn or make suggestions.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;getting&amp;#95;started&quot;&gt;&lt;/a&gt;Getting started&lt;/h2&gt;If you've never done any command line based applications in Clojure check out &lt;a href='http://www.markwoodhall.com/command-line-applications-in-clojure/'&gt;Command line applications in Clojure&lt;/a&gt; as we will be using the structure and dependencies defined there.&lt;p&gt;Assuming you read the linked post above you should have a Clojure project that looks like &lt;a href='https://bitbucket.org/markwoodhall/cli-test'&gt;this&lt;/a&gt;. Just get rid of the &quot;cruft&quot; in there that we don't need and change any references to &lt;code&gt;cli-test&lt;/code&gt; to &lt;code&gt;clj-tdo&lt;/code&gt;, including any folder names.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;thinking&amp;#95;about&amp;#95;a&amp;#95;client&amp;#95;api&quot;&gt;&lt;/a&gt;Thinking about a client API&lt;/h3&gt;Now that we have a shell we can work with I think its worth spending a bit of time considering our client API.&lt;p&gt;I plan on creating a bash alias, probably &lt;code&gt;tdo&lt;/code&gt; or &lt;code&gt;t&lt;/code&gt; that will execute the jar file containing our app.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;creating&amp;#95;tasks&quot;&gt;&lt;/a&gt;Creating tasks&lt;/h4&gt;To keep things simple we only want to capture the things we really need when creating tasks. I'm thinking we can use a &lt;code&gt;new&lt;/code&gt; command, something like:&lt;pre&gt;&lt;code&gt;tdo new -t &amp;quot;Write some new codez&amp;quot; -d 20/07/2014 -c &amp;quot;Programming|Work&amp;quot;
&lt;/code&gt;&lt;/pre&gt;Here &lt;code&gt;-t&lt;/code&gt; is the task, &lt;code&gt;-d&lt;/code&gt; is the due date and &lt;code&gt;-c&lt;/code&gt; is a pipe separated list of categories/tags.&lt;p&gt;Ideally we won't have to quote our strings as its a pain but we can figure that out later.&lt;/p&gt;&lt;p&gt;One thing thats quite specific but I know I would like is the ability to repeat a task. Something like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tdo new -t &amp;quot;Attend daily meeting&amp;quot; -d 20/07/2014 -c &amp;quot;Meetings|Work&amp;quot; -r 4
&lt;/code&gt;&lt;/pre&gt;Here we are using &lt;code&gt;-r&lt;/code&gt; to indicate we want to repeat this task for 4 days.&lt;p&gt;I think thats all we need to capture. Internally we can record the date the task was created as well.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;listing&amp;#95;tasks&quot;&gt;&lt;/a&gt;Listing tasks&lt;/h4&gt;If we think about listing our tasks it would be nice if we could do something like &lt;code&gt;tdo list&lt;/code&gt;. We could also create a short form of that using the familiar &lt;code&gt;ls&lt;/code&gt;. e.g. &lt;code&gt;tdo ls&lt;/code&gt;.&lt;p&gt;Keeping in mind the data we are capturing using the &lt;code&gt;new&lt;/code&gt; command we should probably provide some switches to the &lt;code&gt;ls&lt;/code&gt; command.&lt;/p&gt;&lt;p&gt;Overdue tasks:&lt;pre&gt;&lt;code&gt;tdo ls -o
 &lt;/code&gt;&lt;/pre&gt; Tasks due on a particular date:&lt;pre&gt;&lt;code&gt;tdo ls -d 01/09/2014
 &lt;/code&gt;&lt;/pre&gt; Tasks with a particular category:&lt;pre&gt;&lt;code&gt;tdo ls -c &amp;quot;Work&amp;quot;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I think thats probably it. I can find out what I should have done that I haven't and I can find out things I need to have done by a given date.&lt;/p&gt;&lt;p&gt;The only other thing I would like the &lt;code&gt;ls&lt;/code&gt; command to handle is sorting, perhaps via a &lt;code&gt;-s&lt;/code&gt; switch. I'd just like to pass in a simple &lt;code&gt;D&lt;/code&gt; or &lt;code&gt;C&lt;/code&gt; to order by due or created date.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tdo ls -s D
tdo ls -s C
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a name=&quot;completing&amp;#95;tasks&quot;&gt;&lt;/a&gt;Completing tasks&lt;/h4&gt;A simple &lt;code&gt;done&lt;/code&gt; command is all we need, for now I'm happy with identifying the task by its title but we may need to change that later.&lt;p&gt;We don't need to capture anything else via the command, internally we will probably capture the date the task was completed.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tdo done -t &amp;quot;Some task I completed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a name=&quot;writing&amp;#95;some&amp;#95;code&quot;&gt;&lt;/a&gt;Writing some code&lt;/h3&gt;&lt;p&gt;So, now we can actually start to write some code. I think it will be useful to define the help for our app first.&lt;/p&gt;&lt;p&gt;Open &lt;code&gt;src/clj-tdo/core.clj&lt;/code&gt; and look for the &lt;code&gt;help&lt;/code&gt; function. Lets update it and make it applicable to the API we defined above.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/790ee748fb2fd527ed9c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now, lets update our &lt;code&gt;cli-options&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/b85ab783de4f7a33fb4e.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We are making use of &lt;a href='https://github.com/clj-time/clj-time'&gt;clj-time&lt;/a&gt; to work with dates, so we will need to add a dependecy to &lt;code&gt;project.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/3c7ae253ecdb63b6e13c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We will also need to require the library in &lt;code&gt;src/clj-tdo/core.clj&lt;/code&gt;. Lets update our namespace declaration.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/9c0bf3fa63349bf61ac4.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now we can do a &lt;code&gt;lein uberjar&lt;/code&gt; to generate a jar file, I'm also going to create a bash alias now.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;alias tdo='java -jar target/clj-tdo-0.1.0-SNAPSHOT-standalone.jar'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We don't need to create an alias but I'm going to as I will modify it later in order to  make use of &lt;a href='https://github.com/ninjudd/drip'&gt;drip&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If we run &lt;code&gt;tdo &amp;ndash;help&lt;/code&gt; we should see the help we just created.&lt;/p&gt;&lt;p&gt;Previously we defined the functions that handle our commands as &lt;code&gt;handlers&lt;/code&gt; in &lt;code&gt;src/clj-tdo/core.clj&lt;/code&gt;, lets create a new file for this, &lt;code&gt;src/clj-tdo/handlers.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/a060c3f76c9899fba76a.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We have a handler for each of the &lt;code&gt;new&lt;/code&gt;,&lt;code&gt;list&lt;/code&gt;,&lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt; commands.&lt;/p&gt;&lt;p&gt;Each of the handlers accepts the options map and they currently have no functionality. Before we add functionality lets think about how we are going to store our tasks.&lt;/p&gt;&lt;p&gt;Initially we will just worry about local storage, lets start by defining a &lt;a href='http://clojure.org/protocols'&gt;protocol&lt;/a&gt; for task storage. Create &lt;code&gt;stores.clj&lt;/code&gt; in &lt;code&gt;src/clj-tdo/&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/6b116a821b07cd7a4e03.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;For now we will just worry about putting a single task and getting all tasks.&lt;/p&gt;&lt;p&gt;Next, we can create a &lt;code&gt;LocalDiskStore&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/2f710a8eaee55654dd58.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;In &lt;code&gt;put-task&lt;/code&gt; we &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/slurp'&gt;&lt;code&gt;slurp&lt;/code&gt;&lt;/a&gt; the contents of &lt;code&gt;path&lt;/code&gt; and do a &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/read-string'&gt;&lt;code&gt;read-string&lt;/code&gt;&lt;/a&gt; to turn the string into symbols. In this case we know we are going to store a string representing a map, and we know we can get the tasks out of that map using &lt;code&gt;&amp;#40;:tasks m&amp;#41;&lt;/code&gt;. Since we are assuming the title of our task is unique we can then &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/filter'&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; out any tasks that match on title, we then &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/conj'&gt;&lt;code&gt;conj&lt;/code&gt;&lt;/a&gt; the new or updated task onto &lt;code&gt;tasks&lt;/code&gt;. Once we have an updated tasks list we can &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/assoc'&gt;&lt;code&gt;assoc&lt;/code&gt;&lt;/a&gt; it to our map. We can now &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/pr-str'&gt;&lt;code&gt;pr-str&lt;/code&gt;&lt;/a&gt; our map to get a string and then &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/spit'&gt;&lt;code&gt;spit&lt;/code&gt;&lt;/a&gt; it out to &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In &lt;code&gt;get-tasks&lt;/code&gt; we &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/slurp'&gt;&lt;code&gt;slurp&lt;/code&gt;&lt;/a&gt; the contents of &lt;code&gt;path&lt;/code&gt;, do a &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/read-string'&gt;&lt;code&gt;read-string&lt;/code&gt;&lt;/a&gt; and get &lt;code&gt;:tasks&lt;/code&gt; out of the map.&lt;/p&gt;&lt;p&gt;We also define a convenience function that gets us a &lt;code&gt;LocalDiskStore&lt;/code&gt; at a given &lt;code&gt;path&lt;/code&gt; and makes sure the &lt;code&gt;path&lt;/code&gt; exists.&lt;/p&gt;&lt;p&gt;The entire file looks like this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/26510d18357cb1cf3f1f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Note. &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/slurp'&gt;&lt;code&gt;slurp&lt;/code&gt;&lt;/a&gt; reads a whole file into memory, where this is a concern you can use a &lt;a href='http://richhickey.github.io/clojure/clojure.java.io-api.html#clojure.java.io/reader'&gt;&lt;code&gt;reader&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now that we have something to store and retrieve tasks, lets hook it up, open &lt;code&gt;src/clj-tdo/core.clj&lt;/code&gt; and require the &lt;code&gt;local-disk-store&lt;/code&gt; function. The namespace declaration should now look like this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/9f97f558217e9075f910.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Lets modify the main function to pass a store into our invoked handler.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/b1c64919aa945b997aa9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We now need to modify our handlers to accept the store. Open &lt;code&gt;src/clj-tdo/handlers.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Before we start on the handlers, lets pull in some things we will need. Update the namespace declaration to inlude &lt;a href='https://github.com/clj-time/clj-time'&gt;clj-times&lt;/a&gt; core, formatting and coerce namespaces as well as the &lt;code&gt;put-task&lt;/code&gt;, &lt;code&gt;get-tasks&lt;/code&gt; and &lt;code&gt;Store&lt;/code&gt; declarations.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/dbe09c044787691c4d7c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We also want to define a record to represent our task. We can do this using &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/defrecord'&gt;&lt;code&gt;defrecord&lt;/code&gt;&lt;/a&gt; like so.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/57de8e434764466ce143.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now we can implement the &lt;code&gt;new-task&lt;/code&gt; handler like so.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/98e5c5684fd92d6e51a1.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here we destructure the options map and take only the things we care about and we also add the store argument.&lt;/p&gt;&lt;p&gt;We add a precondition to make sure our store argument implements the Store protocol.&lt;/p&gt;&lt;p&gt;Then we use &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/range'&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; to get a sequence based on the number of days we want to repeat the task.&lt;/p&gt;&lt;p&gt;We then use &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/doseq'&gt;&lt;code&gt;doseq&lt;/code&gt;&lt;/a&gt; to repeatedly create and store a &lt;code&gt;Task&lt;/code&gt; record using the &lt;code&gt;put-task&lt;/code&gt; function. If its a repeated task we number it uniquely based on its position in the sequence. Finally we call &lt;code&gt;list-tasks&lt;/code&gt; to print all our tasks.&lt;/p&gt;&lt;p&gt;Obviously, we now need to work on the &lt;code&gt;list-tasks&lt;/code&gt; handler. We are going pull in another library and create a few supporting functions first.&lt;/p&gt;&lt;p&gt;I'd like to push some ANSI colour codes to the command line in order to appropriately colour tasks, so I'm pulling in &lt;a href='https://github.com/ams-clj/clansi'&gt;clansi&lt;/a&gt; and updating our namespace declaration to require it.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/a55c8f06b9fdc125cd15.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The simplest use of &lt;a href='https://github.com/ams-clj/clansi'&gt;clansi&lt;/a&gt; is as follows.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;style &amp;quot;Some console message&amp;quot; :red&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It has a range of colours and styles, you can see more &lt;a href='https://github.com/ams-clj/clansi/blob/master/src/clansi/core.clj#L3'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now we can define a helper function that accepts multiple styles and uses &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/apply'&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt;. The &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/apply'&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt; function is described as follows.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Applies fn f to the argument list formed by prepending intervening arguments to args. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Next, we define a couple of functions to help with the due status of tasks.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/ddeadc9eb24fabd1390f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We can now make use of these functions and create a &lt;code&gt;prn-task&lt;/code&gt; function that prints a task to the command line.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/2df11ee271d68f49b1e4.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now we can filter and sort our tasks based on the command line arguments we received and then &lt;code&gt;prn-task&lt;/code&gt; for each of our tasks.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/67ef86dc40762dfc54eb.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;All we need to do now is handle the &lt;code&gt;done&lt;/code&gt; command so that we can complete a task.&lt;/p&gt;&lt;p&gt;First we see if we can find our task by the title passed in on the command line, if we can we set &lt;code&gt;:done?&lt;/code&gt; to true and save the task.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/2ebcae6a32991628e934.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;src/clj-tdo/handlers.clj&lt;/code&gt; file as a whole should look like this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/df63689fd87e03d1d0a9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The code in its current state is available &lt;a href='https://bitbucket.org/markwoodhall/clj-tdo'&gt;here&lt;/a&gt;. In the next post we will make some improvements and see how we can create more concise, idiomatic clojure.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://bytebucket.org/markwoodhall/clj-tdo/raw/604cdda72024a7aac64c348e28d2faa11a5168f0/tdo.gif&quot; alt=&quot;tdo example&quot; /&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 02 Jul 2014 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/26-06-2014-command-line-applications-in-clojure/
</guid>
<link>
http://markwoodhall.com/26-06-2014-command-line-applications-in-clojure/
</link>
<title>
Command line applications in Clojure.
</title>
<description>
&lt;p&gt;This post assumes clojure and leiningen are already installed.&lt;/p&gt;&lt;p&gt;The code for this post is available &lt;a href='https://bitbucket.org/markwoodhall/cli-test'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;creating&amp;#95;the&amp;#95;project&quot;&gt;&lt;/a&gt;Creating the project&lt;/h2&gt;&lt;p&gt;First, we create a new project using the default leiningen template.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new default cli-test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, &lt;code&gt;cd&lt;/code&gt; into  &lt;code&gt;cli-test&lt;/code&gt; and lets edit &lt;code&gt;project.clj&lt;/code&gt;. I'm using vim but any editor is fine.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim project.clj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We want to add a dependency to the clojure &lt;a href='https://github.com/clojure/tools.cli'&gt;tools.cli&lt;/a&gt; library. There isn't much of a description to quote for the &lt;a href='https://github.com/clojure/tools.cli'&gt;tools.cli&lt;/a&gt; library but here it is anyway.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Tools for working with command line arguments. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;At the time of this post the current version of &lt;a href='https://github.com/clojure/tools.cli'&gt;tools.cli&lt;/a&gt; is &lt;code&gt;0.3.1&lt;/code&gt;. Add &lt;code&gt;&amp;#91;org.clojure/tools.cli &amp;quot;0.3.1&amp;quot;&amp;#93;&lt;/code&gt; to the project &lt;code&gt;:dependencies&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;While we have &lt;code&gt;project.clj&lt;/code&gt; open lets also tell it where the entry point for our command line app is going to be. Add a &lt;code&gt;:main&lt;/code&gt; key and give it the value &lt;code&gt;cli-test.core&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We should now have a project file that looks something like the one below.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/557ec2060c08e4fefc69.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now, lets edit &lt;code&gt;src/cli&amp;#95;test/core.clj&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim src/cli&amp;#95;test/core.clj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will make use of clojure AOT compilation here and add a &lt;code&gt;:gen-class&lt;/code&gt; directive.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;An optional :gen-class directive can be used in the ns declaration to generate a named class corresponding to a namespace. (:gen-class ...), when supplied, defaults to :name corresponding to the ns name, :main true, :impl-ns same as ns, and :init-impl-ns true. All options of gen-class are supported. &lt;a href='http://clojure.org/compilation'&gt;more&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The usage of &lt;code&gt;:gen-class&lt;/code&gt; tells clojure to AOT compile a java class. For clarity we explictly use &lt;code&gt;:main true&lt;/code&gt; to &lt;code&gt;:gen-class&lt;/code&gt; a class with a &lt;code&gt;main&lt;/code&gt; method, this is not required as &lt;code&gt;:main&lt;/code&gt; defaults to true. We also need to hook up this &lt;code&gt;main&lt;/code&gt; function, so, we define &lt;code&gt;-main&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The reason we use &lt;code&gt;-main&lt;/code&gt; is because of convention. The generated &lt;code&gt;main&lt;/code&gt; function is effectively a stub that will look for a function of the same name but prefixed with a &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;If we wanted to use a different prefix we could change our usage of the &lt;code&gt;:gen-class&lt;/code&gt; directive, like so.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/4efe6d997c7aaa4f2013.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Our &lt;code&gt;-main&lt;/code&gt; function simply prints back the arguments we pass it.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/75d81577786afc86595c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;If we do a &lt;code&gt;lein compile :all&lt;/code&gt; we can then try to run our application. We can do so using the leiningen run command &lt;code&gt;lein run hello mark&lt;/code&gt; or we can generate a jar file using &lt;code&gt;lein uberjar&lt;/code&gt; and then execute that jar using &lt;code&gt;java -jar target/cli-test-0.1.0-SNAPSHOT-standalone.jar hello mark&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Generally I prefer to use &lt;code&gt;lein run&lt;/code&gt; but in some situations I've found it easier to manage more complex command line arguments by using &lt;code&gt;java -jar&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;a&amp;#95;sprinkling&amp;#95;of&amp;#95;tools.cli&quot;&gt;&lt;/a&gt;A sprinkling of tools.cli&lt;/h2&gt;&lt;p&gt;Now that we have a simple command line application we can start to make use of &lt;a href='https://github.com/clojure/tools.cli'&gt;tools.cli&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We will create the structure for a command line application that represents a HTTP server and supports the following commands.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;start ;; Start a HTTP server on port 8080 by default
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;stop ;; Stops a HTTP server on port 8080 by default
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The application will print help when it receives an unexpected command or when it receives the -h option.&lt;/p&gt;&lt;p&gt;First, lets define a vector of options our application accepts. We will accept &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;&amp;ndash;port&lt;/code&gt; as options to the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; commands to specify the port.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/ecaf3a9ca09ec9cb6431.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Note that we can also define a &lt;code&gt;:default&lt;/code&gt; value, a &lt;code&gt;:parse-fn&lt;/code&gt; that will parse the option value and a &lt;code&gt;:validate&lt;/code&gt; function that will validate it.&lt;/p&gt;&lt;p&gt;Now, lets define a function that can give us some option context help.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/a51769c79e80671798ff.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We need to modify the namespace declaration to require &lt;code&gt;clojure.string&lt;/code&gt; and &lt;code&gt;clojure.tools.cli&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/447568809b379412937d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We can now make use of the &lt;code&gt;parse-opts&lt;/code&gt; function from &lt;code&gt;clojure.tools.cli&lt;/code&gt;. As the name suggests, this function will parse the command line arguments against the &lt;code&gt;cli-options&lt;/code&gt; we defined earlier. It will return a map containing:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;:options ;; The parsed options
:arguments ;; The non option based arguments
:summary ;; A summary of the options
:errors ;; Any errors
&lt;/code&gt;&lt;/pre&gt;To demonstrate this lets change our &lt;code&gt;-main&lt;/code&gt; function to call &lt;code&gt;parse-opts&lt;/code&gt; and print the results.&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/3859a4d3fe159edb4e92.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;When we do a &lt;code&gt;lein run&lt;/code&gt; we should see the following printed.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/7b749ede5f35ee0dd98f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;If we do a &lt;code&gt;lein run start -p 8089&lt;/code&gt; we should see the print changes.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/c01b8016d9b8b58e747a.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now we can see our arguments and options are getting parsed lets do something useful and wire up the help.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/8dee77acb465b5e7ff56.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Note. We also defined an &lt;code&gt;exit&lt;/code&gt; function that simply displays a message and sets the exit code.&lt;/p&gt;&lt;p&gt;If we do another &lt;code&gt;lein run&lt;/code&gt; or a &lt;code&gt;lein run -h&lt;/code&gt;  we should get our awesome help printed out.&lt;/p&gt;&lt;p&gt;Lets see if we can handle our &lt;code&gt;start&lt;/code&gt; command now.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/b3b0e572490e9bc5ff6c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;All we needed to do was add a case statement to handle our &lt;code&gt;start&lt;/code&gt; command. We also pulled out the &lt;code&gt;:port&lt;/code&gt; value from our &lt;code&gt;options&lt;/code&gt; map.&lt;/p&gt;&lt;p&gt;We can handle the &lt;code&gt;stop&lt;/code&gt; command in the same way.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/91402116a5513331f57e.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;a&amp;#95;little&amp;#95;bit&amp;#95;of&amp;#95;tweaking&quot;&gt;&lt;/a&gt;A little bit of tweaking&lt;/h2&gt;&lt;p&gt;While this is quite nice, I think it would be better if we define a map of our handlers.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/857120dcefb3026f7a3f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Then in our &lt;code&gt;-main&lt;/code&gt; function we can just lookup the handler.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/d85d9a545d66ae12290b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;All we do here is turn the first argument, in our case &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;stop&lt;/code&gt;, into a keyword using the &lt;a href='http://clojuredocs.org/clojure_core/clojure.core/keyword'&gt;keyword&lt;/a&gt; function.&lt;/p&gt;&lt;p&gt;The doc string for &lt;code&gt;keyword&lt;/code&gt; says&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Returns a Keyword with the given namespace and name. Do not use : in the keyword strings, it will be added automatically. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Once we have the keyword we can lookup its value from the &lt;code&gt;handlers&lt;/code&gt; map.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;unhappy&amp;#95;path&quot;&gt;&lt;/a&gt;The unhappy path&lt;/h2&gt;&lt;p&gt;So far we have only really handled the happy path. What happpens if we try to run an unknown command, for example &lt;code&gt;lein run unknown -p 1234&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;At the moment this will throw a &lt;code&gt;NullPointerException&lt;/code&gt; as we don't have a handler defined for the &lt;code&gt;unknown&lt;/code&gt; command.&lt;/p&gt;&lt;p&gt;Lets fix that.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/79947d98a806711ee2fd.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;If we cant find a handler we print the help.&lt;/p&gt;&lt;p&gt;There is also another issue, even though we defined &lt;code&gt;parse-fn&lt;/code&gt; and &lt;code&gt;validation&lt;/code&gt; functions for our &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;&amp;ndash;port&lt;/code&gt; option we aren't doing anthing to handle the errors they generate. We have to explicitly handle these.&lt;/p&gt;&lt;p&gt;If we run &lt;code&gt;lein run start -p fred&lt;/code&gt; we will get the output.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Starting HTTP server on port 8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that the default value is used because our &lt;code&gt;-p&lt;/code&gt; option was invalid. It would be better it we notified the user of this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/826ef80c287d9c4bb8ed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We add an extra test to our &lt;code&gt;cond&lt;/code&gt;. If there are any errors then we exit with the appropriate error message. We also add an &lt;code&gt;error-msg&lt;/code&gt; function that wraps our errors.&lt;/p&gt;&lt;p&gt;If we run &lt;code&gt;lein run start -p fred&lt;/code&gt; this time we get the output.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Error while parsing option &amp;quot;-p fred&amp;quot;: java.lang.NumberFormatException: For input string: &amp;quot;fred&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we run &lt;code&gt;lein run start -p 100000&lt;/code&gt; then we get the output.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;The were errors processing the command line arguments

Failed to validate &amp;quot;-p 100000&amp;quot;: Must be a number between 0 and 65536
&lt;/code&gt;&lt;/pre&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 26 Jun 2014 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/23-06-2014-destructuring-in-clojure/
</guid>
<link>
http://markwoodhall.com/23-06-2014-destructuring-in-clojure/
</link>
<title>
Destructuring in Clojure.
</title>
<description>
&lt;blockquote&gt;&lt;p&gt; &lt;a href='http://clojure.org/special_forms#Special Forms&amp;ndash;Binding Forms (Destructuring'&gt;Clojure desctructuring&lt;/a&gt;) - Clojure supports abstract structural binding, often called destructuring, in let binding lists, fn parameter lists, and any macro that expands into a let or fn. The basic idea is that a binding-form can be a data structure literal containing symbols that get bound to the respective parts of the init-expr. The binding is abstract in that a vector literal can bind to anything that is sequential, while a map literal can bind to anything that is associative. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;a name=&quot;sequential&amp;#95;binding&amp;#95;destructuring&quot;&gt;&lt;/a&gt;Sequential binding destructuring&lt;/h2&gt;&lt;p&gt;More often called &quot;Vector binding destructuring&quot; this allows us to bind names to parts of sequential things.&lt;/p&gt;&lt;p&gt;A typical example may be.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/9905812da129b8eb05e2.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here we assign the names a, b and c to the items in a vector. The example above outputs `[1 2 3]```.&lt;/p&gt;&lt;p&gt;We can also capture parts of a sequential item and make the item as a whole available.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/e416048722c9936aa24a.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here we capture the first two parts of the sequence as a and b while making available the whole sequence &lt;code&gt;:as&lt;/code&gt; v. The example above outputs `{:a 1 :b 2 :v [1 2 3 4 5]}```&lt;/p&gt;&lt;p&gt;Sequential binding destructuring is not limted to vectors or lists, it can be used for anything that supports `nth```.&lt;/p&gt;&lt;p&gt;We can use it on strings.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/9212da5aef418804556b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Again we capture the first two parts of the sequence as a and b while making available the whole sequence &lt;code&gt;:as&lt;/code&gt; s. The example above outputs `{:a \d :b \e :s &quot;destructuring&quot;}```.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;map&amp;#95;binding&amp;#95;destructuring&quot;&gt;&lt;/a&gt;Map binding destructuring&lt;/h2&gt;This allows us to bind names to parts of a map.&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/64829e8ee717139140c2.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Here we capture the values of the &lt;code&gt;:a&lt;/code&gt; and &lt;code&gt;:b&lt;/code&gt; keys from the map. This outputs `30```.&lt;/p&gt;&lt;p&gt;The same principals discussed in relation to sequential binding apply to map binding as well.&lt;/p&gt;&lt;p&gt;So, we can make available the whole map as follows.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/371bdc06b7f76a08248f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Again we capture &lt;code&gt;:a&lt;/code&gt; and &lt;code&gt;:b&lt;/code&gt; but we also make the whole map available using &lt;code&gt;:as&lt;/code&gt; m.&lt;/p&gt;&lt;p&gt;When we want to desctructure to bindings with the same name as map keys we can make this more concise by using `:keys```.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/069717b7edbabb5cb599.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;destructuring&amp;#95;function&amp;#95;arguments&quot;&gt;&lt;/a&gt;Destructuring function arguments&lt;/h2&gt;&lt;p&gt;We can also destructure function arguments. As an example we can define a function like so.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/dfcbf2521354c30d04ea.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Then we can call it.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/2cc7943e15707561691d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We can use what we learnt above to make available the whole map as well.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/86267845b9e9d4db76c7.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now we can call it like this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/355946019515a9570273.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;What if we want to apply some default values?&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/daf14377c1934603889b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We can use &lt;code&gt;:or&lt;/code&gt; to define default values to use if the keys are not present in the map.&lt;/p&gt;&lt;p&gt;We can call it like this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/1e6798950a259e074fcf.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We can even add &lt;code&gt;:pre&lt;/code&gt; conditions based on the destructures.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/b038170c6ed9da2a9425.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Calling like so will result in a &lt;code&gt;AssertionError&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/a9cf776c3089e7cfc1f6.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 23 Jun 2014 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/22-06-2014-using-ravendb-in-clojure-3/
</guid>
<link>
http://markwoodhall.com/22-06-2014-using-ravendb-in-clojure-3/
</link>
<title>
Using RavenDB in Clojure, part three.
</title>
<description>
&lt;p&gt;This is part three of &quot;Using RavenDB in Clojure&quot;. You can find the second part &lt;a href='http://www.markwoodhall.com/21-06-2014-using-ravendb-in-clojure-2/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In this part we will carry on with the ravendbtest project we created in &lt;a href='http://www.markwoodhall.com/21-06-2014-using-ravendb-in-clojure-1/'&gt;part 1&lt;/a&gt; and &lt;a href='http://www.markwoodhall.com/21-06-2014-using-ravendb-in-clojure-2/'&gt;part 2&lt;/a&gt;. Lets cd into the ravendbtest diretory and start a &lt;code&gt;lein repl&lt;/code&gt; to get started.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;watching&amp;#95;documents&quot;&gt;&lt;/a&gt;Watching Documents&lt;/h2&gt;Using the clj-ravendb client we can &quot;watch&quot; one or more documents for changes.&lt;p&gt;Open project.clj in your editor of choice.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim project.clj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Watching documents makes use of Clojures core.async library. Lets add it as a dependecy to our project.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/c7d01f2174d63459e8ff.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We will also need to require it in the REPL so that we can do some testing.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/cb6b3f4d0db095afa4e4.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;In &lt;a href='http://www.markwoodhall.com/2014/06/21/using-ravendb-in-clojure-2/'&gt;part 2&lt;/a&gt; we created some new documents.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/18f2a58e12be5f6e9cd3.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We can &quot;watch&quot; these documents for changes using the following code.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/698d497c14b5eb10ce8f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;First we create a channel, then we create a &quot;watcher&quot; and tell it the document keys we want to &quot;watch&quot; and the channel we want it to use to publish changes. We then perform a blocking read from the channel to retrieve the changed documents.&lt;/p&gt;&lt;p&gt;This read will block until something is put on the channel. If you were to open another Clojure REPL, require the clj-ravendb client and run the following.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/5a19afc6248040b14b3f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;clj-ravendb will notice that the document has changed and put it on the channel, the blocking read operation we created earlier will finish and we can evaluate it by typing &lt;code&gt;changes&lt;/code&gt; and hitting enter in the original REPL.&lt;/p&gt;&lt;p&gt;Changes will look something like this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/fa7306444dec62c0f442.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Note. If you don't want to block when reading from the channel then you can read using a &lt;a href='https://clojure.github.io/core.async/#clojure.core.async/go'&gt;go&lt;/a&gt; block.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/b9cae81b6b838ca3be6c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;watching&amp;#95;indexes&quot;&gt;&lt;/a&gt;Watching Indexes&lt;/h2&gt;&lt;p&gt;We can also watch index queries for changes. This works in exactly the same way as watching documents.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/f8f04d9098c999dfeed5.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;replication&quot;&gt;&lt;/a&gt;Replication&lt;/h2&gt;&lt;p&gt;RavenDB supports replication &lt;a href='http://ravendb.net/docs/2.0/server/scaling-out/replication'&gt;out of the box&lt;/a&gt;. I enabled replication for my northwind database and replicated it to http://localhost:8081.&lt;/p&gt;&lt;p&gt;All we need to make use of it when using clj-ravendb is to indicate the database we are using is replicated.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/e27012dd86bafeb819d6.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Internally clj-ravendb will call the &lt;code&gt;Raven/Replication/Destinations&lt;/code&gt; endpoint on http://localhost:8080 and capture the replications. &lt;code&gt;northwind&lt;/code&gt; is now represented as a map like this.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/82b652e0710aee808931.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The map contains a &lt;code&gt;:replications&lt;/code&gt; key that has a sequence of RavenDB URLs as its value.&lt;/p&gt;&lt;p&gt;When using this client to do any read based operations such as loading documents or querying indexes the client will use one of the &lt;code&gt;:replications&lt;/code&gt; if it cannot contact the master, in our case http://localhost:8080.&lt;/p&gt;&lt;p&gt;Thats all for now.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 22 Jun 2014 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/21-06-2014-using-ravendb-in-clojure-2/
</guid>
<link>
http://markwoodhall.com/21-06-2014-using-ravendb-in-clojure-2/
</link>
<title>
Using RavenDB in Clojure, part two.
</title>
<description>
&lt;p&gt;This is the second part of &quot;Using RavenDB in Clojure&quot;, you can find the first part &lt;a href='http://markwoodhall.com/2014/06/21/using-ravendb-in-clojure-1/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In this part we will carry on from where we left off with our ravendbtest project. Lets cd into the ravendbtest directory and get going.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;putting&amp;#95;indexes&quot;&gt;&lt;/a&gt;Putting Indexes&lt;/h2&gt;&lt;p&gt;If you are familiar with RavenDB you will know that as well as loading documents using their keys you can also query indexes. This is how we can do that using the clj-ravendb client.&lt;/p&gt;&lt;p&gt;Start a clojure REPL again using &lt;code&gt;lein repl&lt;/code&gt;, require and create a client to consume the northwind database.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/aecb4f58c02f42724b03.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/4c134ad7dbe2e6ee5790.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now, lets create a few documents that our index can cover.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/18f2a58e12be5f6e9cd3.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;We will create an index to cover documents &quot;placedBy&quot; Mark.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/c081eb24f49159d5dc53.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;The index we create is represented as a map. It has a &lt;code&gt;:name&lt;/code&gt;, an &lt;code&gt;:alias&lt;/code&gt; that we can use to identify a document, a &lt;code&gt;:where&lt;/code&gt; clause and a &lt;code&gt;:select&lt;/code&gt; that projects the data items we can query.&lt;/p&gt;&lt;p&gt;Putting the index returns us a map with a &lt;code&gt;:status&lt;/code&gt;, in this case a HTTP 201.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;querying&amp;#95;indexes&quot;&gt;&lt;/a&gt;Querying Indexes&lt;/h2&gt;&lt;p&gt;Since we have created a new index we can now query it.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/1d96f6812fe3230e29ba.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;In this example we ask it to query the &lt;code&gt;:index&lt;/code&gt; we just created, &quot;MyOrders&quot; and we request only orders that have a &lt;code&gt;:cost&lt;/code&gt; of 102.&lt;/p&gt;&lt;p&gt;This returns us a map that contains a &lt;code&gt;:status&lt;/code&gt; and the &lt;code&gt;:results&lt;/code&gt; of the query.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/87343042a7626226c9e5.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Note. We also get a &lt;code&gt;:stale?&lt;/code&gt; key and value in the returned map. As RavenDB indexes data asynchronously in a background thread there is the potential to query a stale index. This &lt;code&gt;:stale?&lt;/code&gt; key value indicates if the query results are stale.&lt;/p&gt;&lt;p&gt;The following should be considered when querying indexes.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/338bda0b5f08f27a5b0c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;It is likely I'll make some more changes to index querying as the functionalty is quite narrow. Currently it only supports an &quot;equals&quot; operation against a projected data item.&lt;/p&gt;&lt;p&gt;In the next post, I'll cover two more topics. We will talk about the ability to &quot;watch&quot; documents/indexes for changes and replication.&lt;/p&gt;&lt;p&gt;Go to &lt;a href='http://www.markwoodhall.com/2014/06/22/using-ravendb-in-clojure-3/'&gt;part 3&lt;/a&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 21 Jun 2014 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://markwoodhall.com/21-06-2014-using-ravendb-in-clojure-1/
</guid>
<link>
http://markwoodhall.com/21-06-2014-using-ravendb-in-clojure-1/
</link>
<title>
Using RavenDB in Clojure, part one.
</title>
<description>
&lt;p&gt;For one reason and another I was interested in using &lt;a href='http://ravendb.net/'&gt;RavenDB&lt;/a&gt; in a clojure project I was working on. I've used RavenDB for a while and had a bit of experience with both the .NET client and the HTTP api.&lt;/p&gt;&lt;p&gt;While there is currently a Java RavenDB client I didnt want to use this for two reasons.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;This is about improving my knowledge of clojure&lt;/li&gt;&lt;li&gt;I would like to compile the client as clojurescript eventually&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So, I figured it would be fun to create a clojure client that didn't just wrap the Java client but instead consumed the HTTP api and I started building &lt;a href='http://clojars.org/clj-ravendb'&gt;clj-ravendb&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The source is &lt;a href='https://bitbucket.org/markwoodhall/clj-ravendb'&gt;here&lt;/a&gt; if you want to have a look.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;getting&amp;#95;started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;&lt;p&gt;I'm assuming a familiarity with clojure and leiningen but if not check out the &lt;a href='http://clojure.org/getting_started'&gt;getting started guides&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Ok, so, lets create a new clojure project.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new ravendbtest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we can cd into the project.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd ravendbtest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I'm using vim but feel free to use whatever makes you happy.&lt;/p&gt;&lt;p&gt;Lets add clj-ravendb to our new project.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim project.clj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At the time of this post the most recent version of clj-ravendb is 0.4.0. Modify project.clj to add the dependency.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/c1e353a051a1ed4a7205.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Note. The most recent version of clj-ravendb is currently:&lt;/p&gt;&lt;p&gt;&lt;a href='http://clojars.org/clj-ravendb'&gt;&lt;img src=&quot;http://clojars.org/clj-ravendb/latest-version.svg&quot; alt=&quot;Clojars Project&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Then run ```lein compile :all``` to compile and download the project dependencies.&lt;/p&gt;&lt;p&gt;Now we've created a project and referenced clj-ravendb we can try it out.&lt;/p&gt;&lt;p&gt;First, while we are still cd'd into the ravendbtest directory lets start a clojure REPL. I am using &lt;a href='https://github.com/tpope/vim-fireplace'&gt;vim-fireplace&lt;/a&gt; to send expressions to the REPL from vim but you can type directly into the REPL if you wish.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein repl
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;putting&amp;#95;documents&quot;&gt;&lt;/a&gt;Putting Documents&lt;/h2&gt;&lt;p&gt;The first thing we need to do is require the ravendb client.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/aecb4f58c02f42724b03.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Note. The rest of the post will assume there is an instance of RavenDB running at http://localhost:8080 and that the instance contains the sample northwind database.&lt;/p&gt;&lt;p&gt;The sample northwind database is available &lt;a href='https://github.com/ayende/ravendb/blob/2.5/Raven.Studio/Assets/EmbeddedData/Northwind.dump'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Next we create a client we can use to consume the northwind database.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/4c134ad7dbe2e6ee5790.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;You can have a peek at the client by evaluating it in the REPL, type ```northwind``` and hit enter. You will see the client is represented by a map.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/787f045a44fe2d423a2b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Now that we have a client we can start using it, type the following into the REPL to create a new document.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/3560a76146a73fed92dd.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;When we put a new document we need to give it a key, which is represented with a string and the actual document, which we represent with a map.&lt;/p&gt;&lt;p&gt;This should return a map that contains a HTTP status, in this case we should get a ```{:status 200}``` indicating the resource was created.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;loading&amp;#95;documents&quot;&gt;&lt;/a&gt;Loading Documents&lt;/h2&gt;&lt;p&gt;Lets try getting the document we just created back out.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/10c9488b7d10cea9a4ec.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;When we load documents we need to provide a sequence of document ids to load. In this case we just load one, &quot;Orders/10000&quot;.&lt;/p&gt;&lt;p&gt;This should give us back the following.&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/markwoodhall/f58daf49f63670d19eda.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Note that we get a ```:status``` that represents the HTTP status code and we get some ```:results```. The ```:results``` are a sequence that contain all the documents we tried to load.&lt;/p&gt;&lt;p&gt;In the next post I'll cover creating and querying indexes and then we will talk about how the client makes use of the replication functionality provided by RavenDB.&lt;/p&gt;&lt;p&gt;Go to &lt;a href='http://markwoodhall.com/2014/06/21/using-ravendb-in-clojure-2/'&gt;part 2&lt;/a&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 21 Jun 2014 00:00:00 +0100
</pubDate>
</item>
</channel>
</rss>
